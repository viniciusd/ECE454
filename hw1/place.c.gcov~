        -:    0:Source:SRC/place.c
        -:    0:Graph:OBJ/place.gcno
        -:    0:Data:OBJ/place.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*#include <stdlib.h> */
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <assert.h>
        -:    5:#include "util.h"
        -:    6:#include "vpr_types.h"
        -:    7:#include "globals.h"
        -:    8:#include "mst.h"
        -:    9:#include "place.h"
        -:   10:#include "read_place.h"
        -:   11:#include "draw.h"
        -:   12:#include "place_and_route.h"
        -:   13:#include "net_delay.h"
        -:   14:#include "path_delay.h"
        -:   15:#include "timing_place_lookup.h"
        -:   16:#include "timing_place.h"
        -:   17:#include "place_stats.h"
        -:   18:
        -:   19:/************** Types and defines local to place.c ***************************/
        -:   20:
        -:   21:#define SMALL_NET 4		/* Cut off for incremental bounding box updates. */
        -:   22:/* 4 is fastest -- I checked.                    */
        -:   23:
        -:   24:
        -:   25:/* For comp_cost.  NORMAL means use the method that generates updateable  *
        -:   26: * bounding boxes for speed.  CHECK means compute all bounding boxes from *
        -:   27: * scratch using a very simple routine to allow checks of the other       *
        -:   28: * costs.                                                                 */
        -:   29:
        -:   30:enum cost_methods
        -:   31:{ NORMAL, CHECK };
        -:   32:
        -:   33:#define FROM 0			/* What block connected to a net has moved? */
        -:   34:#define TO 1
        -:   35:#define FROM_AND_TO 2
        -:   36:
        -:   37:#define ERROR_TOL .0025
        -:   38:#define MAX_MOVES_BEFORE_RECOMPUTE 50000
        -:   39:
        -:   40:/********************** Variables local to place.c ***************************/
        -:   41:
        -:   42:/* [0..num_nets-1]  0 if net never connects to the same block more than  *
        -:   43: *  once, otherwise it gives the number of duplicate connections.        */
        -:   44:
        -:   45:static int *duplicate_pins;
        -:   46:
        -:   47:/* [0..num_nets-1][0..num_unique_blocks-1]  Contains a list of blocks with *
        -:   48: * no duplicated blocks for ONLY those nets that had duplicates.           */
        -:   49:
        -:   50:static int **unique_pin_list;
        -:   51:
        -:   52:/* Cost of a net, and a temporary cost of a net used during move assessment. */
        -:   53:
        -:   54:static float *net_cost = NULL, *temp_net_cost = NULL;	/* [0..num_nets-1] */
        -:   55:
        -:   56:/* [0..num_nets-1][1..num_pins-1]. What is the value of the timing   */
        -:   57:/* driven portion of the cost function. These arrays will be set to  */
        -:   58:/* (criticality * delay) for each point to point connection. */
        -:   59:static float **point_to_point_timing_cost = NULL;
        -:   60:static float **temp_point_to_point_timing_cost = NULL;
        -:   61:
        -:   62:
        -:   63:
        -:   64:/* [0..num_nets-1][1..num_pins-1]. What is the value of the delay */
        -:   65:/* for each connection in the circuit */
        -:   66:static float **point_to_point_delay_cost = NULL;
        -:   67:static float **temp_point_to_point_delay_cost = NULL;
        -:   68:
        -:   69:
        -:   70:/* [0..num_blocks-1][0..pins_per_clb-1]. Indicates which pin on the net */
        -:   71:/* this block corresponds to, this is only required during timing-driven */
        -:   72:/* placement. It is used to allow us to update individual connections on */
        -:   73:/* each net */
        -:   74:static int **net_pin_index = NULL;
        -:   75:
        -:   76:
        -:   77:/* [0..num_nets-1].  Store the bounding box coordinates and the number of    *
        -:   78: * blocks on each of a net's bounding box (to allow efficient updates),      *
        -:   79: * respectively.                                                             */
        -:   80:
        -:   81:static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;
        -:   82:
        -:   83:/* Stores the maximum and expected occupancies, plus the cost, of each   *
        -:   84: * region in the placement.  Used only by the NONLINEAR_CONG cost        *
        -:   85: * function.  [0..num_region-1][0..num_region-1].  Place_region_x and    *
        -:   86: * y give the situation for the x and y directed channels, respectively. */
        -:   87:
        -:   88:static struct s_place_region **place_region_x, **place_region_y;
        -:   89:
        -:   90:/* Used only with nonlinear congestion.  [0..num_regions].            */
        -:   91:
        -:   92:static float *place_region_bounds_x, *place_region_bounds_y;
        -:   93:
        -:   94:/* The arrays below are used to precompute the inverse of the average   *
        -:   95: * number of tracks per channel between [subhigh] and [sublow].  Access *
        -:   96: * them as chan?_place_cost_fac[subhigh][sublow].  They are used to     *
        -:   97: * speed up the computation of the cost function that takes the length  *
        -:   98: * of the net bounding box in each dimension, divided by the average    *
        -:   99: * number of tracks in that direction; for other cost functions they    *
        -:  100: * will never be used.                                                  */
        -:  101:
        -:  102:static float **chanx_place_cost_fac, **chany_place_cost_fac;
        -:  103:
        -:  104:
        -:  105:/* Expected crossing counts for nets with different #'s of pins.  From *
        -:  106: * ICCAD 94 pp. 690 - 695 (with linear interpolation applied by me).   */
        -:  107:
        -:  108:static const float cross_count[50] = {	/* [0..49] */
        -:  109:    1.0, 1.0, 1.0, 1.0828, 1.1536, 1.2206, 1.2823, 1.3385, 1.3991, 1.4493,
        -:  110:    1.4974, 1.5455, 1.5937, 1.6418, 1.6899, 1.7304, 1.7709, 1.8114, 1.8519,
        -:  111:    1.8924,
        -:  112:    1.9288, 1.9652, 2.0015, 2.0379, 2.0743, 2.1061, 2.1379, 2.1698, 2.2016,
        -:  113:    2.2334,
        -:  114:    2.2646, 2.2958, 2.3271, 2.3583, 2.3895, 2.4187, 2.4479, 2.4772, 2.5064,
        -:  115:    2.5356,
        -:  116:    2.5610, 2.5864, 2.6117, 2.6371, 2.6625, 2.6887, 2.7148, 2.7410, 2.7671,
        -:  117:    2.7933
        -:  118:};
        -:  119:
        -:  120:
        -:  121:/********************* Static subroutines local to place.c *******************/
        -:  122:
        -:  123:static void alloc_and_load_unique_pin_list(void);
        -:  124:
        -:  125:static void free_unique_pin_list(void);
        -:  126:
        -:  127:static void alloc_place_regions(int num_regions);
        -:  128:
        -:  129:static void load_place_regions(int num_regions);
        -:  130:
        -:  131:static void free_place_regions(int num_regions);
        -:  132:
        -:  133:static void alloc_and_load_placement_structs(int place_cost_type,
        -:  134:					     int num_regions,
        -:  135:					     float place_cost_exp,
        -:  136:					     float ***old_region_occ_x,
        -:  137:					     float ***old_region_occ_y,
        -:  138:					     struct s_placer_opts
        -:  139:					     placer_opts);
        -:  140:
        -:  141:static void free_placement_structs(int place_cost_type,
        -:  142:				   int num_regions,
        -:  143:				   float **old_region_occ_x,
        -:  144:				   float **old_region_occ_y,
        -:  145:				   struct s_placer_opts placer_opts);
        -:  146:
        -:  147:static void alloc_and_load_for_fast_cost_update(float place_cost_exp);
        -:  148:
        -:  149:static void initial_placement(enum e_pad_loc_type pad_loc_type,
        -:  150:			      char *pad_loc_file);
        -:  151:
        -:  152:static float comp_bb_cost(int method,
        -:  153:			  int place_cost_type,
        -:  154:			  int num_regions);
        -:  155:
        -:  156:static int try_swap(float t,
        -:  157:		    float *cost,
        -:  158:		    float *bb_cost,
        -:  159:		    float *timing_cost,
        -:  160:		    float rlim,
        -:  161:		    int place_cost_type,
        -:  162:		    float **old_region_occ_x,
        -:  163:		    float **old_region_occ_y,
        -:  164:		    int num_regions,
        -:  165:		    boolean fixed_pins,
        -:  166:		    enum e_place_algorithm place_algorithm,
        -:  167:		    float timing_tradeoff,
        -:  168:		    float inverse_prev_bb_cost,
        -:  169:		    float inverse_prev_timing_cost,
        -:  170:		    float *delay_cost,
        -:  171:		    int *x_lookup);
        -:  172:
        -:  173:static void check_place(float bb_cost,
        -:  174:			float timing_cost,
        -:  175:			int place_cost_type,
        -:  176:			int num_regions,
        -:  177:			enum e_place_algorithm place_algorithm,
        -:  178:			float delay_cost);
        -:  179:
        -:  180:static float starting_t(float *cost_ptr,
        -:  181:			float *bb_cost_ptr,
        -:  182:			float *timing_cost_ptr,
        -:  183:			int place_cost_type,
        -:  184:			float **old_region_occ_x,
        -:  185:			float **old_region_occ_y,
        -:  186:			int num_regions,
        -:  187:			boolean fixed_pins,
        -:  188:			struct s_annealing_sched annealing_sched,
        -:  189:			int max_moves,
        -:  190:			float rlim,
        -:  191:			enum e_place_algorithm place_algorithm,
        -:  192:			float timing_tradeoff,
        -:  193:			float inverse_prev_bb_cost,
        -:  194:			float inverse_prev_timing_cost,
        -:  195:			float *delay_cost_ptr);
        -:  196:
        -:  197:
        -:  198:static void update_t(float *t,
        -:  199:		     float std_dev,
        -:  200:		     float rlim,
        -:  201:		     float success_rat,
        -:  202:		     struct s_annealing_sched annealing_sched);
        -:  203:
        -:  204:static void update_rlim(float *rlim,
        -:  205:			float success_rat);
        -:  206:
        -:  207:static int exit_crit(float t,
        -:  208:		     float cost,
        -:  209:		     struct s_annealing_sched annealing_sched);
        -:  210:
        -:  211:static int count_connections(void);
        -:  212:
        -:  213:static void compute_net_pin_index_values(void);
        -:  214:
        -:  215:static double get_std_dev(int n,
        -:  216:			  double sum_x_squared,
        -:  217:			  double av_x);
        -:  218:
        -:  219:static void free_fast_cost_update_structs(void);
        -:  220:
        -:  221:static float recompute_bb_cost(int place_cost_type,
        -:  222:			       int num_regions);
        -:  223:
        -:  224:static float comp_td_point_to_point_delay(int inet,
        -:  225:					  int ipin);
        -:  226:
        -:  227:static void update_td_cost(int b_from,
        -:  228:			   int b_to,
        -:  229:			   int num_of_pins);
        -:  230:
        -:  231:static void comp_delta_td_cost(int b_from,
        -:  232:			       int b_to,
        -:  233:			       int num_of_pins,
        -:  234:			       float *delta_timing,
        -:  235:			       float *delta_delay);
        -:  236:
        -:  237:static void comp_td_costs(float *timing_cost,
        -:  238:			  float *connection_delay_sum);
        -:  239:
        -:  240:static int assess_swap(float delta_c,
        -:  241:		       float t);
        -:  242:
        -:  243:static boolean find_to(int x_from,
        -:  244:		       int y_from,
        -:  245:		       t_type_ptr type,
        -:  246:		       float rlim,
        -:  247:		       int *x_lookup,
        -:  248:		       int *x_to,
        -:  249:		       int *y_to);
        -:  250:
        -:  251:static void get_non_updateable_bb(int inet,
        -:  252:				  struct s_bb *bb_coord_new);
        -:  253:
        -:  254:static void update_bb(int inet,
        -:  255:		      struct s_bb *bb_coord_new,
        -:  256:		      struct s_bb *bb_edge_new,
        -:  257:		      int xold,
        -:  258:		      int yold,
        -:  259:		      int xnew,
        -:  260:		      int ynew);
        -:  261:
        -:  262:static int find_affected_nets(int *nets_to_update,
        -:  263:			      int *net_block_moved,
        -:  264:			      int b_from,
        -:  265:			      int b_to,
        -:  266:			      int num_of_pins);
        -:  267:
        -:  268:static float get_net_cost(int inet,
        -:  269:			  struct s_bb *bb_ptr);
        -:  270:
        -:  271:static float nonlinear_cong_cost(int num_regions);
        -:  272:
        -:  273:static void update_region_occ(int inet,
        -:  274:			      struct s_bb *coords,
        -:  275:			      int add_or_sub,
        -:  276:			      int num_regions);
        -:  277:
        -:  278:static void save_region_occ(float **old_region_occ_x,
        -:  279:			    float **old_region_occ_y,
        -:  280:			    int num_regions);
        -:  281:
        -:  282:static void restore_region_occ(float **old_region_occ_x,
        -:  283:			       float **old_region_occ_y,
        -:  284:			       int num_regions);
        -:  285:
        -:  286:static void get_bb_from_scratch(int inet,
        -:  287:				struct s_bb *coords,
        -:  288:				struct s_bb *num_on_edges);
        -:  289:
        -:  290:static double get_net_wirelength_estimate(int inet,
        -:  291:					  struct s_bb *bbptr);
        -:  292:
        -:  293:/*****************************************************************************/
        -:  294:/* RESEARCH TODO: Bounding Box and rlim need to be redone for heterogeneous to prevent a QoR penalty */
        -:  295:void
function try_place called 1 returned 100% blocks executed 67%
        1:  296:try_place(struct s_placer_opts placer_opts,
        -:  297:	  struct s_annealing_sched annealing_sched,
        -:  298:	  t_chan_width_dist chan_width_dist,
        -:  299:	  struct s_router_opts router_opts,
        -:  300:	  struct s_det_routing_arch det_routing_arch,
        -:  301:	  t_segment_inf * segment_inf,
        -:  302:	  t_timing_inf timing_inf,
        -:  303:	  t_subblock_data * subblock_data_ptr,
        -:  304:	  t_mst_edge *** mst)
        -:  305:{
        -:  306:
        -:  307:    /* Does almost all the work of placing a circuit.  Width_fac gives the   *
        -:  308:     * width of the widest channel.  Place_cost_exp says what exponent the   *
        -:  309:     * width should be taken to when calculating costs.  This allows a       *
        -:  310:     * greater bias for anisotropic architectures.  Place_cost_type          *
        -:  311:     * determines which cost function is used.  num_regions is used only     *
        -:  312:     * the place_cost_type is NONLINEAR_CONG.                                */
        -:  313:
        -:  314:
        -:  315:    int tot_iter, inner_iter, success_sum;
        -:  316:    int move_lim, moves_since_cost_recompute, width_fac;
        -:  317:    float t, success_rat, rlim, d_max, est_crit;
        -:  318:    float cost, timing_cost, bb_cost, new_bb_cost, new_timing_cost;
        -:  319:    float delay_cost, new_delay_cost, place_delay_value;
        -:  320:    float inverse_prev_bb_cost, inverse_prev_timing_cost;
        -:  321:    float oldt;
        -:  322:    double av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  323:	sum_of_squares, std_dev;
        -:  324:    float **old_region_occ_x, **old_region_occ_y;
        -:  325:    char msg[BUFSIZE];
        -:  326:    boolean fixed_pins;		/* Can pads move or not? */
        -:  327:    int num_connections;
        -:  328:    int inet, ipin, outer_crit_iter_count, inner_crit_iter_count,
        -:  329:	inner_recompute_limit;
        -:  330:    float **net_slack, **net_delay;
        -:  331:    float crit_exponent;
        -:  332:    float first_rlim, final_rlim, inverse_delta_rlim;
        -:  333:    float **remember_net_delay_original_ptr;	/*used to free net_delay if it is re-assigned */
        -:  334:
        -:  335:    int *x_lookup;		/* Used to quickly determine valid swap columns */
        -:  336:
        -:  337:    /* Allocated here because it goes into timing critical code where each memory allocation is expensive */
        1:  338:    x_lookup = my_malloc(nx * sizeof(int));
call    0 returned 100%
        -:  339:
        1:  340:    remember_net_delay_original_ptr = NULL;	/*prevents compiler warning */
        -:  341:
        1:  342:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  343:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
        -:  344:       placer_opts.enable_timing_computations)
        -:  345:	{
        -:  346:	    /*do this before the initial placement to avoid messing up the initial placement */
        1:  347:	    alloc_lookups_and_criticalities(chan_width_dist,
call    0 returned 100%
        -:  348:					    router_opts,
        -:  349:					    det_routing_arch,
        -:  350:					    segment_inf,
        -:  351:					    timing_inf,
        -:  352:					    *subblock_data_ptr,
        -:  353:					    &net_delay, &net_slack);
        -:  354:
        1:  355:	    remember_net_delay_original_ptr = net_delay;
        -:  356:
        -:  357:	    /*#define PRINT_LOWER_BOUND */
        -:  358:#ifdef PRINT_LOWER_BOUND
        -:  359:	    /*print the crit_path, assuming delay between blocks that are*
        -:  360:	     *block_dist apart*/
        -:  361:
        -:  362:	    if(placer_opts.block_dist <= nx)
        -:  363:		place_delay_value =
        -:  364:		    delta_clb_to_clb[placer_opts.block_dist][0];
        -:  365:	    else if(placer_opts.block_dist <= ny)
        -:  366:		place_delay_value =
        -:  367:		    delta_clb_to_clb[0][placer_opts.block_dist];
        -:  368:	    else
        -:  369:		place_delay_value = delta_clb_to_clb[nx][ny];
        -:  370:
        -:  371:	    printf("\nLower bound assuming delay of %g\n", place_delay_value);
        -:  372:
        -:  373:	    load_constant_net_delay(net_delay, place_delay_value);
        -:  374:	    load_timing_graph_net_delays(net_delay);
        -:  375:	    d_max = load_net_slack(net_slack, 0);
        -:  376:
        -:  377:#ifdef CREATE_ECHO_FILES
        -:  378:	    print_critical_path("Placement_Lower_Bound.echo");
        -:  379:	    print_sink_delays("Placement_Lower_Bound_Sink_Delays.echo");
        -:  380:#endif /* CREATE_ECHO_FILES */
        -:  381:
        -:  382:	    /*also print sink delays assuming 0 delay between blocks, 
        -:  383:	     * this tells us how much logic delay is on each path */
        -:  384:
        -:  385:	    load_constant_net_delay(net_delay, 0);
        -:  386:	    load_timing_graph_net_delays(net_delay);
        -:  387:	    d_max = load_net_slack(net_slack, 0);
        -:  388:
        -:  389:#ifdef CREATE_ECHO_FILES
        -:  390:	    print_sink_delays("Placement_Logic_Sink_Delays.echo");
        -:  391:#endif /* CREATE_ECHO_FILES */
        -:  392:#endif
        -:  393:
        -:  394:	}
        -:  395:
        1:  396:    width_fac = placer_opts.place_chan_width;
        1:  397:    if(placer_opts.pad_loc_type == FREE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  398:	fixed_pins = FALSE;
        -:  399:    else
    #####:  400:	fixed_pins = TRUE;
        -:  401:
        1:  402:    init_chan(width_fac, chan_width_dist);
call    0 returned 100%
        -:  403:
        1:  404:    alloc_and_load_placement_structs(placer_opts.place_cost_type,
call    0 returned 100%
        -:  405:				     placer_opts.num_regions,
        -:  406:				     placer_opts.place_cost_exp,
        -:  407:				     &old_region_occ_x, &old_region_occ_y,
        -:  408:				     placer_opts);
        -:  409:
        1:  410:    initial_placement(placer_opts.pad_loc_type, placer_opts.pad_loc_file);
call    0 returned 100%
        1:  411:    init_draw_coords((float)width_fac);
call    0 returned 100%
        -:  412:
        -:  413:    /* Storing the number of pins on each type of block makes the swap routine *
        -:  414:     * slightly more efficient.                                                */
        -:  415:
        -:  416:    /* Gets initial cost and loads bounding boxes. */
        -:  417:
        1:  418:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  419:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  420:	{
        1:  421:	    bb_cost = comp_bb_cost(NORMAL, placer_opts.place_cost_type,
call    0 returned 100%
        -:  422:				   placer_opts.num_regions);
        -:  423:
        1:  424:	    crit_exponent = placer_opts.td_place_exp_first;	/*this will be modified when rlim starts to change */
        -:  425:
        1:  426:	    compute_net_pin_index_values();
        -:  427:
        1:  428:	    num_connections = count_connections();
        -:  429:	    printf
        1:  430:		("\nThere are %d point to point connections in this circuit\n\n",
call    0 returned 100%
        -:  431:		 num_connections);
        -:  432:
        1:  433:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  434:		{
    #####:  435:		    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
    #####:  436:			for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 never executed
branch  1 never executed
    #####:  437:			    timing_place_crit[inet][ipin] = 0;	/*dummy crit values */
        -:  438:
    #####:  439:		    comp_td_costs(&timing_cost, &delay_cost);	/*first pass gets delay_cost, which is used 
call    0 never executed
        -:  440:								 * in criticality computations in the next call
        -:  441:								 * to comp_td_costs. */
    #####:  442:		    place_delay_value = delay_cost / num_connections;	/*used for computing criticalities */
    #####:  443:		    load_constant_net_delay(net_delay, place_delay_value);
call    0 never executed
        -:  444:
        -:  445:		}
        -:  446:	    else
        -:  447:		place_delay_value = 0;
        -:  448:
        -:  449:
        1:  450:	    if(placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  451:		{
        1:  452:		    net_delay = point_to_point_delay_cost;	/*this keeps net_delay up to date with      *
        -:  453:								 * *the same values that the placer is using  *
        -:  454:								 * *point_to_point_delay_cost is computed each*
        -:  455:								 * *time that comp_td_costs is called, and is *
        -:  456:								 * *also updated after any swap is accepted   */
        -:  457:		}
        -:  458:
        -:  459:
        1:  460:	    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  461:	    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
        1:  462:	    load_criticalities(placer_opts, net_slack, d_max, crit_exponent);
call    0 returned 100%
        1:  463:	    outer_crit_iter_count = 1;
        -:  464:
        -:  465:	    /*now we can properly compute costs  */
        1:  466:	    comp_td_costs(&timing_cost, &delay_cost);	/*also puts proper values into point_to_point_delay_cost */
call    0 returned 100%
        -:  467:
        1:  468:	    inverse_prev_timing_cost = 1 / timing_cost;
        1:  469:	    inverse_prev_bb_cost = 1 / bb_cost;
        1:  470:	    cost = 1;		/*our new cost function uses normalized values of           */
        -:  471:	    /*bb_cost and timing_cost, the value of cost will be reset  */
        -:  472:	    /*to 1 at each temperature when *_TIMING_DRIVEN_PLACE is true */
        -:  473:	}
        -:  474:    else
        -:  475:	{			/*BOUNDING_BOX_PLACE */
    #####:  476:	    cost = bb_cost = comp_bb_cost(NORMAL, placer_opts.place_cost_type,
call    0 never executed
        -:  477:					  placer_opts.num_regions);
    #####:  478:	    timing_cost = 0;
    #####:  479:	    delay_cost = 0;
    #####:  480:	    place_delay_value = 0;
    #####:  481:	    outer_crit_iter_count = 0;
    #####:  482:	    num_connections = 0;
    #####:  483:	    d_max = 0;
    #####:  484:	    crit_exponent = 0;
        -:  485:
    #####:  486:	    inverse_prev_timing_cost = 0;	/*inverses not used */
    #####:  487:	    inverse_prev_bb_cost = 0;
        -:  488:	}
        -:  489:
        1:  490:    move_lim = (int)(annealing_sched.inner_num * pow(num_blocks, 1.3333));
        -:  491:
        1:  492:    if(placer_opts.inner_loop_recompute_divider != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  493:	inner_recompute_limit = (int)(0.5 + (float)move_lim /
    #####:  494:				      (float)placer_opts.
        -:  495:				      inner_loop_recompute_divider);
        -:  496:    else			/*don't do an inner recompute */
        1:  497:	inner_recompute_limit = move_lim + 1;
        -:  498:
        -:  499:
        -:  500:    /* Sometimes I want to run the router with a random placement.  Avoid *
        -:  501:     * using 0 moves to stop division by 0 and 0 length vector problems,  *
        -:  502:     * by setting move_lim to 1 (which is still too small to do any       *
        -:  503:     * significant optimization).                                         */
        -:  504:
        1:  505:    if(move_lim <= 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  506:	move_lim = 1;
        -:  507:
        1:  508:    rlim = (float)max(nx, ny);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  509:
        1:  510:    first_rlim = rlim;		/*used in timing-driven placement for exponent computation */
        1:  511:    final_rlim = 1;
        1:  512:    inverse_delta_rlim = 1 / (first_rlim - final_rlim);
        -:  513:
        2:  514:    t = starting_t(&cost, &bb_cost, &timing_cost,
call    0 returned 100%
        -:  515:		   placer_opts.place_cost_type,
        -:  516:		   old_region_occ_x, old_region_occ_y,
        -:  517:		   placer_opts.num_regions, fixed_pins, annealing_sched,
        -:  518:		   move_lim, rlim, placer_opts.place_algorithm,
        -:  519:		   placer_opts.timing_tradeoff, inverse_prev_bb_cost,
        -:  520:		   inverse_prev_timing_cost, &delay_cost);
        1:  521:    tot_iter = 0;
        1:  522:    moves_since_cost_recompute = 0;
        -:  523:    printf
        1:  524:	("Initial Placement Cost: %g bb_cost: %g td_cost: %g delay_cost: %g\n\n",
call    0 returned 100%
        -:  525:	 cost, bb_cost, timing_cost, delay_cost);
        -:  526:
        -:  527:#ifndef SPEC
        -:  528:    printf
        1:  529:	("%11s  %10s %11s  %11s  %11s %11s  %11s %9s %8s  %7s  %7s  %10s  %7s\n",
call    0 returned 100%
        -:  530:	 "T", "Cost", "Av. BB Cost", "Av. TD Cost", "Av Tot Del",
        -:  531:	 "P to P Del", "d_max", "Ac Rate", "Std Dev", "R limit", "Exp",
        -:  532:	 "Tot. Moves", "Alpha");
        -:  533:    printf
        1:  534:	("%11s  %10s %11s  %11s  %11s %11s  %11s %9s %8s  %7s  %7s  %10s  %7s\n",
call    0 returned 100%
        -:  535:	 "--------", "----------", "-----------", "-----------",
        -:  536:	 "---------", "----------", "-----", "-------", "-------",
        -:  537:	 "-------", "-------", "----------", "-----");
        -:  538:#endif
        -:  539:
        1:  540:    sprintf(msg,
        -:  541:	    "Initial Placement.  Cost: %g  BB Cost: %g  TD Cost %g  Delay Cost: %g "
        -:  542:	    "\t d_max %g Channel Factor: %d", cost, bb_cost, timing_cost,
        -:  543:	    delay_cost, d_max, width_fac);
        1:  544:    update_screen(MAJOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
        -:  545:
      367:  546:    while(exit_crit(t, cost, annealing_sched) == 0)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  547:	{
        -:  548:
      121:  549:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  550:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  551:		{
      121:  552:		    cost = 1;
        -:  553:		}
        -:  554:
      121:  555:	    av_cost = 0.;
      121:  556:	    av_bb_cost = 0.;
      121:  557:	    av_delay_cost = 0.;
      121:  558:	    av_timing_cost = 0.;
      121:  559:	    sum_of_squares = 0.;
      121:  560:	    success_sum = 0;
        -:  561:
      121:  562:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  563:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  564:		{
        -:  565:
      121:  566:		    if(outer_crit_iter_count >=
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  567:		       placer_opts.recompute_crit_iter
    #####:  568:		       || placer_opts.inner_loop_recompute_divider != 0)
branch  0 never executed
branch  1 never executed
        -:  569:			{
        -:  570:#ifdef VERBOSE
        -:  571:			    printf("Outer Loop Recompute Criticalities\n");
        -:  572:#endif
      121:  573:			    place_delay_value = delay_cost / num_connections;
        -:  574:
      121:  575:			    if(placer_opts.place_algorithm ==
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  576:			       NET_TIMING_DRIVEN_PLACE)
    #####:  577:				load_constant_net_delay(net_delay,
call    0 never executed
        -:  578:							place_delay_value);
        -:  579:			    /*note, for path_based, the net delay is not updated since it is current,
        -:  580:			     *because it accesses point_to_point_delay array */
        -:  581:
      121:  582:			    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
      121:  583:			    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
      121:  584:			    load_criticalities(placer_opts, net_slack, d_max,
call    0 returned 100%
        -:  585:					       crit_exponent);
        -:  586:			    /*recompute costs from scratch, based on new criticalities */
      121:  587:			    comp_td_costs(&timing_cost, &delay_cost);
      121:  588:			    outer_crit_iter_count = 0;
call    0 returned 100%
        -:  589:			}
      121:  590:		    outer_crit_iter_count++;
        -:  591:
        -:  592:		    /*at each temperature change we update these values to be used     */
        -:  593:		    /*for normalizing the tradeoff between timing and wirelength (bb)  */
      121:  594:		    inverse_prev_bb_cost = 1 / bb_cost;
      121:  595:		    inverse_prev_timing_cost = 1 / timing_cost;
        -:  596:		}
        -:  597:
      121:  598:	    inner_crit_iter_count = 1;
        -:  599:
   862851:  600:	    for(inner_iter = 0; inner_iter < move_lim; inner_iter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  601:		{
   862730:  602:		    if(try_swap(t, &cost, &bb_cost, &timing_cost,
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        -:  603:				rlim, placer_opts.place_cost_type,
        -:  604:				old_region_occ_x, old_region_occ_y,
        -:  605:				placer_opts.num_regions, fixed_pins,
        -:  606:				placer_opts.place_algorithm,
        -:  607:				placer_opts.timing_tradeoff,
        -:  608:				inverse_prev_bb_cost,
        -:  609:				inverse_prev_timing_cost, &delay_cost,
        -:  610:				x_lookup) == 1)
        -:  611:			{
   386509:  612:			    success_sum++;
   386509:  613:			    av_cost += cost;
   386509:  614:			    av_bb_cost += bb_cost;
   386509:  615:			    av_timing_cost += timing_cost;
   386509:  616:			    av_delay_cost += delay_cost;
   386509:  617:			    sum_of_squares += cost * cost;
        -:  618:			}
        -:  619:
   862730:  620:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  621:		       || placer_opts.place_algorithm ==
        -:  622:		       PATH_TIMING_DRIVEN_PLACE)
        -:  623:			{
        -:  624:
   862730:  625:			    if(inner_crit_iter_count >= inner_recompute_limit
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  626:			       && inner_iter != move_lim - 1)
branch  0 never executed
branch  1 never executed
        -:  627:				{	/*on last iteration don't recompute */
        -:  628:
    #####:  629:				    inner_crit_iter_count = 0;
        -:  630:#ifdef VERBOSE
        -:  631:				    printf
        -:  632:					("Inner Loop Recompute Criticalities\n");
        -:  633:#endif
    #####:  634:				    if(placer_opts.place_algorithm ==
branch  0 never executed
branch  1 never executed
        -:  635:				       NET_TIMING_DRIVEN_PLACE)
        -:  636:					{
    #####:  637:					    place_delay_value =
    #####:  638:						delay_cost / num_connections;
    #####:  639:					    load_constant_net_delay(net_delay,
call    0 never executed
        -:  640:								    place_delay_value);
        -:  641:					}
        -:  642:
    #####:  643:				    load_timing_graph_net_delays(net_delay);
call    0 never executed
    #####:  644:				    d_max = load_net_slack(net_slack, 0);
call    0 never executed
    #####:  645:				    load_criticalities(placer_opts, net_slack,
call    0 never executed
        -:  646:						       d_max, crit_exponent);
    #####:  647:				    comp_td_costs(&timing_cost, &delay_cost);
call    0 never executed
        -:  648:				}
   862730:  649:			    inner_crit_iter_count++;
        -:  650:			}
        -:  651:#ifdef VERBOSE
        -:  652:		    printf
        -:  653:			("t = %g  cost = %g   bb_cost = %g timing_cost = %g move = %d dmax = %g\n",
        -:  654:			 t, cost, bb_cost, timing_cost, inner_iter, d_max);
        -:  655:		    if(fabs
        -:  656:		       (bb_cost -
        -:  657:			comp_bb_cost(CHECK, placer_opts.place_cost_type,
        -:  658:				     placer_opts.num_regions)) >
        -:  659:		       bb_cost * ERROR_TOL)
        -:  660:			exit(1);
        -:  661:#endif
        -:  662:		}
        -:  663:
        -:  664:	    /* Lines below prevent too much round-off error from accumulating *
        -:  665:	     * in the cost over many iterations.  This round-off can lead to  *
        -:  666:	     * error checks failing because the cost is different from what   *
        -:  667:	     * you get when you recompute from scratch.                       */
        -:  668:
      121:  669:	    moves_since_cost_recompute += move_lim;
      121:  670:	    if(moves_since_cost_recompute > MAX_MOVES_BEFORE_RECOMPUTE)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  671:		{
       15:  672:		    new_bb_cost =
call    0 returned 100%
        -:  673:			recompute_bb_cost(placer_opts.place_cost_type,
        -:  674:					  placer_opts.num_regions);
       15:  675:		    if(fabs(new_bb_cost - bb_cost) > bb_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  676:			{
        -:  677:			    printf
    #####:  678:				("Error in try_place:  new_bb_cost = %g, old bb_cost = %g.\n",
call    0 never executed
        -:  679:				 new_bb_cost, bb_cost);
    #####:  680:			    exit(1);
call    0 never executed
        -:  681:			}
       15:  682:		    bb_cost = new_bb_cost;
        -:  683:
       15:  684:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  685:		       || placer_opts.place_algorithm ==
        -:  686:		       PATH_TIMING_DRIVEN_PLACE)
        -:  687:			{
       15:  688:			    comp_td_costs(&new_timing_cost, &new_delay_cost);
call    0 returned 100%
       30:  689:			    if(fabs(new_timing_cost - timing_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  690:			       timing_cost * ERROR_TOL)
        -:  691:				{
        -:  692:				    printf
    #####:  693:					("Error in try_place:  new_timing_cost = %g, old timing_cost = %g.\n",
call    0 never executed
        -:  694:					 new_timing_cost, timing_cost);
    #####:  695:				    exit(1);
call    0 never executed
        -:  696:				}
       30:  697:			    if(fabs(new_delay_cost - delay_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  698:			       delay_cost * ERROR_TOL)
        -:  699:				{
        -:  700:				    printf
    #####:  701:					("Error in try_place:  new_delay_cost = %g, old delay_cost = %g.\n",
call    0 never executed
        -:  702:					 new_delay_cost, delay_cost);
    #####:  703:				    exit(1);
call    0 never executed
        -:  704:				}
       15:  705:			    timing_cost = new_timing_cost;
        -:  706:			}
        -:  707:
       15:  708:		    if(placer_opts.place_algorithm == BOUNDING_BOX_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  709:			{
    #####:  710:			    cost = new_bb_cost;
        -:  711:			}
        -:  712:		    moves_since_cost_recompute = 0;
        -:  713:		}
        -:  714:
      121:  715:	    tot_iter += move_lim;
      121:  716:	    success_rat = ((float)success_sum) / move_lim;
      121:  717:	    if(success_sum == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  718:		{
    #####:  719:		    av_cost = cost;
    #####:  720:		    av_bb_cost = bb_cost;
    #####:  721:		    av_timing_cost = timing_cost;
    #####:  722:		    av_delay_cost = delay_cost;
        -:  723:		}
        -:  724:	    else
        -:  725:		{
      121:  726:		    av_cost /= success_sum;
      121:  727:		    av_bb_cost /= success_sum;
      121:  728:		    av_timing_cost /= success_sum;
      121:  729:		    av_delay_cost /= success_sum;
        -:  730:		}
      121:  731:	    std_dev = get_std_dev(success_sum, sum_of_squares, av_cost);
call    0 returned 100%
        -:  732:
        -:  733:#ifndef SPEC
        -:  734:	    printf
      121:  735:		("%11.5g  %10.6g %11.6g  %11.6g  %11.6g %11.6g %11.4g %9.4g %8.3g  %7.4g  %7.4g  %10d  ",
call    0 returned 100%
        -:  736:		 t, av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  737:		 place_delay_value, d_max, success_rat, std_dev, rlim,
        -:  738:		 crit_exponent, tot_iter);
        -:  739:#endif
        -:  740:
      121:  741:	    oldt = t;		/* for finding and printing alpha. */
      242:  742:	    update_t(&t, std_dev, rlim, success_rat, annealing_sched);
call    0 returned 100%
        -:  743:
        -:  744:#ifndef SPEC
      121:  745:	    printf("%7.4g\n", t / oldt);
call    0 returned 100%
        -:  746:#endif
        -:  747:
      121:  748:	    sprintf(msg,
        -:  749:		    "Cost: %g  BB Cost %g  TD Cost %g  Temperature: %g  d_max: %g",
        -:  750:		    cost, bb_cost, timing_cost, t, d_max);
      121:  751:	    update_screen(MINOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
        -:  752:	    update_rlim(&rlim, success_rat);
        -:  753:
      121:  754:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  755:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  756:		{
      121:  757:		    crit_exponent =
      121:  758:			(1 -
      121:  759:			 (rlim -
      242:  760:			  final_rlim) * inverse_delta_rlim) *
      121:  761:			(placer_opts.td_place_exp_last -
        -:  762:			 placer_opts.td_place_exp_first) +
        -:  763:			placer_opts.td_place_exp_first;
        -:  764:		}
        -:  765:#ifdef VERBOSE
        -:  766:	    dump_clbs();
        -:  767:#endif
        -:  768:	}
        -:  769:
        1:  770:    t = 0;			/* freeze out */
        1:  771:    av_cost = 0.;
        1:  772:    av_bb_cost = 0.;
        1:  773:    av_timing_cost = 0.;
        1:  774:    sum_of_squares = 0.;
        1:  775:    av_delay_cost = 0.;
        1:  776:    success_sum = 0;
        -:  777:
        1:  778:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  779:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  780:	{
        -:  781:	    /*at each temperature change we update these values to be used     */
        -:  782:	    /*for normalizing the tradeoff between timing and wirelength (bb)  */
        1:  783:	    if(outer_crit_iter_count >= placer_opts.recompute_crit_iter ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  784:	       placer_opts.inner_loop_recompute_divider != 0)
        -:  785:		{
        -:  786:
        -:  787:#ifdef VERBOSE
        -:  788:		    printf("Outer Loop Recompute Criticalities\n");
        -:  789:#endif
        1:  790:		    place_delay_value = delay_cost / num_connections;
        -:  791:
        1:  792:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  793:			load_constant_net_delay(net_delay, place_delay_value);
call    0 never executed
        -:  794:
        1:  795:		    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  796:		    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
        1:  797:		    load_criticalities(placer_opts, net_slack, d_max,
call    0 returned 100%
        -:  798:				       crit_exponent);
        -:  799:		    /*recompute criticaliies */
        1:  800:		    comp_td_costs(&timing_cost, &delay_cost);
        1:  801:		    outer_crit_iter_count = 0;
call    0 returned 100%
        -:  802:		}
        1:  803:	    outer_crit_iter_count++;
        -:  804:
        1:  805:	    inverse_prev_bb_cost = 1 / (bb_cost);
        1:  806:	    inverse_prev_timing_cost = 1 / (timing_cost);
        -:  807:	}
        -:  808:
        1:  809:    inner_crit_iter_count = 1;
        -:  810:
     7131:  811:    for(inner_iter = 0; inner_iter < move_lim; inner_iter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  812:	{
     7130:  813:	    if(try_swap(t, &cost, &bb_cost, &timing_cost,
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        -:  814:			rlim, placer_opts.place_cost_type,
        -:  815:			old_region_occ_x, old_region_occ_y,
        -:  816:			placer_opts.num_regions, fixed_pins,
        -:  817:			placer_opts.place_algorithm,
        -:  818:			placer_opts.timing_tradeoff, inverse_prev_bb_cost,
        -:  819:			inverse_prev_timing_cost, &delay_cost, x_lookup) == 1)
        -:  820:		{
      318:  821:		    success_sum++;
      318:  822:		    av_cost += cost;
      318:  823:		    av_bb_cost += bb_cost;
      318:  824:		    av_delay_cost += delay_cost;
      318:  825:		    av_timing_cost += timing_cost;
      318:  826:		    sum_of_squares += cost * cost;
        -:  827:
      318:  828:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  829:		       || placer_opts.place_algorithm ==
        -:  830:		       PATH_TIMING_DRIVEN_PLACE)
        -:  831:			{
        -:  832:
      318:  833:			    if(inner_crit_iter_count >= inner_recompute_limit
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  834:			       && inner_iter != move_lim - 1)
branch  0 never executed
branch  1 never executed
        -:  835:				{
        -:  836:
    #####:  837:				    inner_crit_iter_count = 0;
        -:  838:#ifdef VERBOSE
        -:  839:				    printf
        -:  840:					("Inner Loop Recompute Criticalities\n");
        -:  841:#endif
    #####:  842:				    if(placer_opts.place_algorithm ==
branch  0 never executed
branch  1 never executed
        -:  843:				       NET_TIMING_DRIVEN_PLACE)
        -:  844:					{
    #####:  845:					    place_delay_value =
    #####:  846:						delay_cost / num_connections;
    #####:  847:					    load_constant_net_delay(net_delay,
call    0 never executed
        -:  848:								    place_delay_value);
        -:  849:					}
        -:  850:
    #####:  851:				    load_timing_graph_net_delays(net_delay);
call    0 never executed
    #####:  852:				    d_max = load_net_slack(net_slack, 0);
call    0 never executed
    #####:  853:				    load_criticalities(placer_opts, net_slack,
call    0 never executed
        -:  854:						       d_max, crit_exponent);
    #####:  855:				    comp_td_costs(&timing_cost, &delay_cost);
call    0 never executed
        -:  856:				}
      318:  857:			    inner_crit_iter_count++;
        -:  858:			}
        -:  859:		}
        -:  860:#ifdef VERBOSE
        -:  861:	    printf("t = %g  cost = %g   move = %d\n", t, cost, tot_iter);
        -:  862:#endif
        -:  863:	}
        1:  864:    tot_iter += move_lim;
        1:  865:    success_rat = ((float)success_sum) / move_lim;
        1:  866:    if(success_sum == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  867:	{
    #####:  868:	    av_cost = cost;
    #####:  869:	    av_bb_cost = bb_cost;
    #####:  870:	    av_delay_cost = delay_cost;
    #####:  871:	    av_timing_cost = timing_cost;
        -:  872:	}
        -:  873:    else
        -:  874:	{
        1:  875:	    av_cost /= success_sum;
        1:  876:	    av_bb_cost /= success_sum;
        1:  877:	    av_delay_cost /= success_sum;
        1:  878:	    av_timing_cost /= success_sum;
        -:  879:	}
        -:  880:
        1:  881:    std_dev = get_std_dev(success_sum, sum_of_squares, av_cost);
call    0 returned 100%
        -:  882:
        -:  883:
        -:  884:#ifndef SPEC
        -:  885:    printf
        1:  886:	("%11.5g  %10.6g %11.6g  %11.6g  %11.6g %11.6g %11.4g %9.4g %8.3g  %7.4g  %7.4g  %10d  \n\n",
call    0 returned 100%
        -:  887:	 t, av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  888:	 place_delay_value, d_max, success_rat, std_dev, rlim,
        -:  889:	 crit_exponent, tot_iter);
        -:  890:
        -:  891:#endif
        -:  892:
        -:  893:#ifdef VERBOSE
        -:  894:    dump_clbs();
        -:  895:#endif
        -:  896:
        1:  897:    check_place(bb_cost, timing_cost, placer_opts.place_cost_type,
call    0 returned 100%
        -:  898:		placer_opts.num_regions, placer_opts.place_algorithm,
        -:  899:		delay_cost);
        -:  900:
        1:  901:    if(placer_opts.enable_timing_computations &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  902:       placer_opts.place_algorithm == BOUNDING_BOX_PLACE)
        -:  903:	{
        -:  904:	    /*need this done since the timing data has not been kept up to date*
        -:  905:	     *in bounding_box mode */
    #####:  906:	    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
    #####:  907:		for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 never executed
branch  1 never executed
    #####:  908:		    timing_place_crit[inet][ipin] = 0;	/*dummy crit values */
    #####:  909:	    comp_td_costs(&timing_cost, &delay_cost);	/*computes point_to_point_delay_cost */
call    0 never executed
        -:  910:	}
        -:  911:
        1:  912:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  913:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
        -:  914:       placer_opts.enable_timing_computations)
        -:  915:	{
        1:  916:	    net_delay = point_to_point_delay_cost;	/*this makes net_delay up to date with    *
        -:  917:							 *the same values that the placer is using*/
        1:  918:	    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  919:	    est_crit = load_net_slack(net_slack, 0);
call    0 returned 100%
        -:  920:#ifdef CREATE_ECHO_FILES
        -:  921:/*		print_sink_delays("placement_sink_delays.echo"); */
        -:  922:	    print_net_slack("placement_net_slacks.echo", net_slack);
        -:  923:	    print_critical_path("placement_crit_path.echo",
        -:  924:				*subblock_data_ptr);
        -:  925:#endif /* CREATE_ECHO_FILES */
        1:  926:	    printf("Placement Estimated Crit Path Delay: %g\n\n", est_crit);
call    0 returned 100%
        -:  927:	}
        -:  928:
        -:  929:
        1:  930:    sprintf(msg,
        -:  931:	    "Placement. Cost: %g  bb_cost: %g td_cost: %g Channel Factor: %d d_max: %g",
        -:  932:	    cost, bb_cost, timing_cost, width_fac, d_max);
        -:  933:    printf
        1:  934:	("Placement. Cost: %g  bb_cost: %g  td_cost: %g  delay_cost: %g.\n",
call    0 returned 100%
        -:  935:	 cost, bb_cost, timing_cost, delay_cost);
        1:  936:    update_screen(MAJOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
        -:  937:
        -:  938:#ifdef SPEC
        -:  939:    printf("Total moves attempted: %d.0\n", tot_iter);
        -:  940:#endif
        -:  941:
        1:  942:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  943:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
        -:  944:       placer_opts.enable_timing_computations)
        -:  945:	{
        -:  946:
        1:  947:	    net_delay = remember_net_delay_original_ptr;
        -:  948:
        1:  949:	    free_placement_structs(placer_opts.place_cost_type,
call    0 returned 100%
        -:  950:				   placer_opts.num_regions, old_region_occ_x,
        -:  951:				   old_region_occ_y, placer_opts);
        1:  952:	    free_lookups_and_criticalities(&net_delay, &net_slack);
call    0 returned 100%
        -:  953:	}
        -:  954:
        -:  955:    /* placement is done - find mst of all nets.
        -:  956:     * creating mst for each net; this gives me an ordering of sinks 
        -:  957:     * by which I will direct search (A*) for. */
        1:  958:    if(*mst)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  959:	{
    #####:  960:	    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
        -:  961:		{
    #####:  962:		    assert((*mst)[inet]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  963:		    free((*mst)[inet]);
        -:  964:		}
    #####:  965:	    free(*mst);
        -:  966:	}
        1:  967:    *mst = (t_mst_edge **) my_malloc(sizeof(t_mst_edge *) * num_nets);
call    0 returned 100%
      512:  968:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  969:	{
      511:  970:	    (*mst)[inet] = get_mst_of_net(inet);
call    0 returned 100%
        -:  971:	}
        1:  972:    free(x_lookup);
        1:  973:}
        -:  974:
        -:  975:static int
        -:  976:count_connections()
        -:  977:{
        -:  978:    /*only count non-global connections */
        -:  979:
        -:  980:    int count, inet;
        -:  981:
        1:  982:    count = 0;
        -:  983:
      512:  984:    for(inet = 0; inet < num_nets; inet++)
call    0 returned 100%
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
        -:  985:	{
        -:  986:
      511:  987:	    if(net[inet].is_global)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  988:		continue;
        -:  989:
      510:  990:	    count += net[inet].num_sinks;
        -:  991:	}
        -:  992:    return (count);
        -:  993:}
        -:  994:
        -:  995:static void
function compute_net_pin_index_values called 1 returned 100% blocks executed 100%
        1:  996:compute_net_pin_index_values()
        -:  997:{
        -:  998:    /*computes net_pin_index array, this array allows us to quickly */
        -:  999:    /*find what pin on the net a block pin corresponds to */
        -: 1000:
        -: 1001:    int inet, netpin, blk, iblk, ipin;
        -: 1002:    t_type_ptr type;
        -: 1003:
        -: 1004:    /*initialize values to OPEN */
      139: 1005:    for(iblk = 0; iblk < num_blocks; iblk++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1006:	{
      138: 1007:	    type = block[iblk].type;
     3380: 1008:	    for(ipin = 0; ipin < type->num_pins; ipin++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1009:		{
     3242: 1010:		    net_pin_index[iblk][ipin] = OPEN;
        -: 1011:		}
        -: 1012:	}
        -: 1013:
      511: 1014:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1015:	{
        -: 1016:
      511: 1017:	    if(net[inet].is_global)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        1: 1018:		continue;
        -: 1019:
     1661: 1020:	    for(netpin = 0; netpin <= net[inet].num_sinks; netpin++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -: 1021:		{
     1661: 1022:		    blk = net[inet].node_block[netpin];
     1661: 1023:		    net_pin_index[blk][net[inet].node_block_pin[netpin]] =
        -: 1024:			netpin;
        -: 1025:		}
        -: 1026:	}
        1: 1027:}
        -: 1028:
        -: 1029:
        -: 1030:static double
function get_std_dev called 123 returned 100% blocks executed 100%
      123: 1031:get_std_dev(int n,
        -: 1032:	    double sum_x_squared,
        -: 1033:	    double av_x)
        -: 1034:{
        -: 1035:
        -: 1036:    /* Returns the standard deviation of data set x.  There are n sample points, *
        -: 1037:     * sum_x_squared is the summation over n of x^2 and av_x is the average x.   *
        -: 1038:     * All operations are done in double precision, since round off error can be *
        -: 1039:     * a problem in the initial temp. std_dev calculation for big circuits.      */
        -: 1040:
        -: 1041:    double std_dev;
        -: 1042:
      123: 1043:    if(n <= 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1044:	std_dev = 0.;
        -: 1045:    else
      123: 1046:	std_dev = (sum_x_squared - n * av_x * av_x) / (double)(n - 1);
        -: 1047:
      123: 1048:    if(std_dev > 0.)		/* Very small variances sometimes round negative */
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      117: 1049:	std_dev = sqrt(std_dev);
        -: 1050:    else
        -: 1051:	std_dev = 0.;
        -: 1052:
      123: 1053:    return (std_dev);
        -: 1054:}
        -: 1055:
        -: 1056:
        -: 1057:static void
        -: 1058:update_rlim(float *rlim,
        -: 1059:	    float success_rat)
        -: 1060:{
        -: 1061:
        -: 1062:    /* Update the range limited to keep acceptance prob. near 0.44.  Use *
        -: 1063:     * a floating point rlim to allow gradual transitions at low temps.  */
        -: 1064:
        -: 1065:    float upper_lim;
        -: 1066:
      121: 1067:    *rlim = (*rlim) * (1. - 0.44 + success_rat);
      121: 1068:    upper_lim = max(nx, ny);
      121: 1069:    *rlim = min(*rlim, upper_lim);
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
      121: 1070:    *rlim = max(*rlim, 1.);
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1071:}
        -: 1072:
        -: 1073:
        -: 1074:/* Update the temperature according to the annealing schedule selected. */
        -: 1075:static void
function update_t.isra.0 called 121 returned 100% blocks executed 92%
      121: 1076:update_t(float *t,
        -: 1077:	 float std_dev,
        -: 1078:	 float rlim,
        -: 1079:	 float success_rat,
        -: 1080:	 struct s_annealing_sched annealing_sched)
        -: 1081:{
        -: 1082:
        -: 1083:    /*  float fac; */
        -: 1084:
      121: 1085:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1086:	{
    #####: 1087:	    *t = annealing_sched.alpha_t * (*t);
        -: 1088:	}
        -: 1089:
        -: 1090:    /* Old standard deviation based stuff is below.  This bogs down horribly 
        -: 1091:     * for big circuits (alu4 and especially bigkey_mod). */
        -: 1092:    /* #define LAMBDA .7  */
        -: 1093:    /* ------------------------------------ */
        -: 1094:#if 0
        -: 1095:    else if(std_dev == 0.)
        -: 1096:	{
        -: 1097:	    *t = 0.;
        -: 1098:	}
        -: 1099:    else
        -: 1100:	{
        -: 1101:	    fac = exp(-LAMBDA * (*t) / std_dev);
        -: 1102:	    fac = max(0.5, fac);
        -: 1103:	    *t = (*t) * fac;
        -: 1104:	}
        -: 1105:#endif
        -: 1106:    /* ------------------------------------- */
        -: 1107:
        -: 1108:    else
        -: 1109:    {				/* AUTO_SCHED */
      121: 1110:	if(success_rat > 0.96)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1111:	    {
        4: 1112:		*t = (*t) * 0.5;
        -: 1113:	    }
      117: 1114:	else if(success_rat > 0.8)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1115:	    {
        9: 1116:		*t = (*t) * 0.9;
        -: 1117:	    }
      108: 1118:	else if(success_rat > 0.15 || rlim > 1.)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1119:	    {
      101: 1120:		*t = (*t) * 0.95;
        -: 1121:	    }
        -: 1122:	else
        -: 1123:	    {
        7: 1124:		*t = (*t) * 0.8;
        -: 1125:	    }
        -: 1126:    }
      121: 1127:}
        -: 1128:
        -: 1129:
        -: 1130:static int
        -: 1131:exit_crit(float t,
        -: 1132:	  float cost,
        -: 1133:	  struct s_annealing_sched annealing_sched)
        -: 1134:{
        -: 1135:
        -: 1136:    /* Return 1 when the exit criterion is met.                        */
        -: 1137:
      122: 1138:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1139:	{
    #####: 1140:	    if(t < annealing_sched.exit_t)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
        -: 1142:		    return (1);
        -: 1143:		}
        -: 1144:	    else
        -: 1145:		{
        -: 1146:		    return (0);
        -: 1147:		}
        -: 1148:	}
        -: 1149:
        -: 1150:    /* Automatic annealing schedule */
        -: 1151:
      122: 1152:    if(t < 0.005 * cost / num_nets)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1153:	{
        -: 1154:	    return (1);
        -: 1155:	}
        -: 1156:    else
        -: 1157:	{
        -: 1158:	    return (0);
        -: 1159:	}
        -: 1160:}
        -: 1161:
        -: 1162:
        -: 1163:static float
function starting_t.isra.3 called 1 returned 100% blocks executed 88%
        1: 1164:starting_t(float *cost_ptr,
        -: 1165:	   float *bb_cost_ptr,
        -: 1166:	   float *timing_cost_ptr,
        -: 1167:	   int place_cost_type,
        -: 1168:	   float **old_region_occ_x,
        -: 1169:	   float **old_region_occ_y,
        -: 1170:	   int num_regions,
        -: 1171:	   boolean fixed_pins,
        -: 1172:	   struct s_annealing_sched annealing_sched,
        -: 1173:	   int max_moves,
        -: 1174:	   float rlim,
        -: 1175:	   enum e_place_algorithm place_algorithm,
        -: 1176:	   float timing_tradeoff,
        -: 1177:	   float inverse_prev_bb_cost,
        -: 1178:	   float inverse_prev_timing_cost,
        -: 1179:	   float *delay_cost_ptr)
        -: 1180:{
        -: 1181:
        -: 1182:    /* Finds the starting temperature (hot condition).              */
        -: 1183:
        -: 1184:    int i, num_accepted, move_lim;
        -: 1185:    double std_dev, av, sum_of_squares;	/* Double important to avoid round off */
        -: 1186:    int *x_lookup;
        -: 1187:
        1: 1188:    x_lookup = (int *)my_malloc(nx * sizeof(int));
call    0 returned 100%
        -: 1189:
        1: 1190:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1191:	return (annealing_sched.init_t);
        -: 1192:
        1: 1193:    move_lim = min(max_moves, num_blocks);
        -: 1194:
        1: 1195:    num_accepted = 0;
        1: 1196:    av = 0.;
        1: 1197:    sum_of_squares = 0.;
        -: 1198:
        -: 1199:    /* Try one move per block.  Set t high so essentially all accepted. */
        -: 1200:
      139: 1201:    for(i = 0; i < move_lim; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1202:	{
      138: 1203:	    if(try_swap(1.e30, cost_ptr, bb_cost_ptr, timing_cost_ptr, rlim,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1204:			place_cost_type,
        -: 1205:			old_region_occ_x, old_region_occ_y, num_regions,
        -: 1206:			fixed_pins, place_algorithm, timing_tradeoff,
        -: 1207:			inverse_prev_bb_cost, inverse_prev_timing_cost,
        -: 1208:			delay_cost_ptr, x_lookup) == 1)
        -: 1209:		{
      138: 1210:		    num_accepted++;
      138: 1211:		    av += *cost_ptr;
      138: 1212:		    sum_of_squares += *cost_ptr * (*cost_ptr);
        -: 1213:		}
        -: 1214:	}
        -: 1215:
        1: 1216:    if(num_accepted != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1217:	av /= num_accepted;
        -: 1218:    else
        -: 1219:	av = 0.;
        -: 1220:
        1: 1221:    std_dev = get_std_dev(num_accepted, sum_of_squares, av);
call    0 returned 100%
        -: 1222:
        -: 1223:#ifdef DEBUG
        1: 1224:    if(num_accepted != move_lim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1225:	{
        -: 1226:	    printf
    #####: 1227:		("Warning:  Starting t: %d of %d configurations accepted.\n",
call    0 never executed
        -: 1228:		 num_accepted, move_lim);
        -: 1229:	}
        -: 1230:#endif
        -: 1231:
        -: 1232:#ifdef VERBOSE
        -: 1233:    printf("std_dev: %g, average cost: %g, starting temp: %g\n",
        -: 1234:	   std_dev, av, 20. * std_dev);
        -: 1235:#endif
        -: 1236:
        1: 1237:    free(x_lookup);
        -: 1238:
        -: 1239:    /* Set the initial temperature to 20 times the standard of deviation */
        -: 1240:    /* so that the initial temperature adjusts according to the circuit */
        1: 1241:    return (20. * std_dev);
        -: 1242:}
        -: 1243:
        -: 1244:
        -: 1245:static int
function try_swap called 869998 returned 100% blocks executed 87%
   869998: 1246:try_swap(float t,
        -: 1247:	 float *cost,
        -: 1248:	 float *bb_cost,
        -: 1249:	 float *timing_cost,
        -: 1250:	 float rlim,
        -: 1251:	 int place_cost_type,
        -: 1252:	 float **old_region_occ_x,
        -: 1253:	 float **old_region_occ_y,
        -: 1254:	 int num_regions,
        -: 1255:	 boolean fixed_pins,
        -: 1256:	 enum e_place_algorithm place_algorithm,
        -: 1257:	 float timing_tradeoff,
        -: 1258:	 float inverse_prev_bb_cost,
        -: 1259:	 float inverse_prev_timing_cost,
        -: 1260:	 float *delay_cost,
        -: 1261:	 int *x_lookup)
        -: 1262:{
        -: 1263:
        -: 1264:    /* Picks some block and moves it to another spot.  If this spot is   *
        -: 1265:     * occupied, switch the blocks.  Assess the change in cost function  *
        -: 1266:     * and accept or reject the move.  If rejected, return 0.  If        *
        -: 1267:     * accepted return 1.  Pass back the new value of the cost function. * 
        -: 1268:     * rlim is the range limiter.                                                                            */
        -: 1269:
        -: 1270:    int b_from, x_to, y_to, z_to, x_from, y_from, z_from, b_to;
        -: 1271:    int i, k, inet, keep_switch, num_of_pins, max_pins_per_fb;
        -: 1272:    int num_nets_affected, bb_index;
        -: 1273:    float delta_c, bb_delta_c, timing_delta_c, delay_delta_c, newcost;
        -: 1274:    static struct s_bb *bb_coord_new = NULL;
        -: 1275:    static struct s_bb *bb_edge_new = NULL;
        -: 1276:    static int *nets_to_update = NULL, *net_block_moved = NULL;
        -: 1277:
   869998: 1278:    max_pins_per_fb = 0;
  4349990: 1279:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1280:	{
  3479992: 1281:	    max_pins_per_fb =
  3479992: 1282:		max(max_pins_per_fb, type_descriptors[i].num_pins);
        -: 1283:	}
        -: 1284:
        -: 1285:    /* Allocate the local bb_coordinate storage, etc. only once. */
        -: 1286:
   869998: 1287:    if(bb_coord_new == NULL)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1288:	{
        1: 1289:	    bb_coord_new = (struct s_bb *)my_malloc(2 * max_pins_per_fb *
call    0 returned 100%
        -: 1290:						    sizeof(struct s_bb));
        1: 1291:	    bb_edge_new = (struct s_bb *)my_malloc(2 * max_pins_per_fb *
call    0 returned 100%
        -: 1292:						   sizeof(struct s_bb));
        1: 1293:	    nets_to_update =
        1: 1294:		(int *)my_malloc(2 * max_pins_per_fb * sizeof(int));
call    0 returned 100%
        1: 1295:	    net_block_moved =
        1: 1296:		(int *)my_malloc(2 * max_pins_per_fb * sizeof(int));
call    0 returned 100%
        -: 1297:	}
        -: 1298:
        -: 1299:
   869998: 1300:    delay_delta_c = 0.0;
   869998: 1301:    b_from = my_irand(num_blocks - 1);
call    0 returned 100%
        -: 1302:
        -: 1303:    /* If the pins are fixed we never move them from their initial    *
        -: 1304:     * random locations.  The code below could be made more efficient *
        -: 1305:     * by using the fact that pins appear first in the block list,    *
        -: 1306:     * but this shouldn't cause any significant slowdown and won't be *
        -: 1307:     * broken if I ever change the parser so that the pins aren't     *
        -: 1308:     * necessarily at the start of the block list.                    */
        -: 1309:
   869998: 1310:    if(fixed_pins == TRUE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:	{
    #####: 1312:	    while(block[b_from].type == IO_TYPE)
branch  0 never executed
branch  1 never executed
        -: 1313:		{
    #####: 1314:		    b_from = my_irand(num_blocks - 1);
call    0 never executed
        -: 1315:		}
        -: 1316:	}
        -: 1317:
   869998: 1318:    x_from = block[b_from].x;
   869998: 1319:    y_from = block[b_from].y;
   869998: 1320:    z_from = block[b_from].z;
        -: 1321:
   869998: 1322:    if(!find_to
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
   869998: 1323:       (x_from, y_from, block[b_from].type, rlim, x_lookup, &x_to, &y_to))
call    0 returned 100%
        -: 1324:	return FALSE;
        -: 1325:
        -: 1326:    /* Make the switch in order to make computing the new bounding *
        -: 1327:     * box simpler.  If the cost increase is too high, switch them *
        -: 1328:     * back.  (block data structures switched, clbs not switched   *
        -: 1329:     * until success of move is determined.)                       */
        -: 1330:
   848146: 1331:    z_to = 0;
   848146: 1332:    if(grid[x_to][y_to].type->capacity > 1)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -: 1333:	{
   397393: 1334:	    z_to = my_irand(grid[x_to][y_to].type->capacity - 1);
call    0 returned 100%
        -: 1335:	}
   848146: 1336:    if(grid[x_to][y_to].blocks[z_to] == EMPTY)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 1337:	{			/* Moving to an empty location */
   177570: 1338:	    b_to = EMPTY;
   177570: 1339:	    block[b_from].x = x_to;
   177570: 1340:	    block[b_from].y = y_to;
   177570: 1341:	    block[b_from].z = z_to;
        -: 1342:	}
        -: 1343:    else
        -: 1344:	{			/* Swapping two blocks */
   670576: 1345:	    b_to = grid[x_to][y_to].blocks[z_to];
   670576: 1346:	    block[b_to].x = x_from;
   670576: 1347:	    block[b_to].y = y_from;
   670576: 1348:	    block[b_to].z = z_from;
        -: 1349:
   670576: 1350:	    block[b_from].x = x_to;
   670576: 1351:	    block[b_from].y = y_to;
   670576: 1352:	    block[b_from].z = z_to;
        -: 1353:	}
        -: 1354:
        -: 1355:    /* Now update the cost function.  May have to do major optimizations *
        -: 1356:     * here later.                                                       */
        -: 1357:
        -: 1358:    /* I'm using negative values of temp_net_cost as a flag, so DO NOT   *
        -: 1359:     * use cost functions that can go negative.                          */
        -: 1360:
   848146: 1361:    delta_c = 0;		/* Change in cost due to this swap. */
   848146: 1362:    bb_delta_c = 0;
   848146: 1363:    timing_delta_c = 0;
        -: 1364:
   848146: 1365:    num_of_pins = block[b_from].type->num_pins;
        -: 1366:
   848146: 1367:    num_nets_affected = find_affected_nets(nets_to_update, net_block_moved,
call    0 returned 100%
        -: 1368:					   b_from, b_to, num_of_pins);
        -: 1369:
   848146: 1370:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1371:	{
    #####: 1372:	    save_region_occ(old_region_occ_x, old_region_occ_y, num_regions);
call    0 never executed
        -: 1373:	}
        -: 1374:
        -: 1375:    bb_index = 0;		/* Index of new bounding box. */
        -: 1376:
 17007588: 1377:    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -: 1378:	{
 17007588: 1379:	    inet = nets_to_update[k];
        -: 1380:
        -: 1381:	    /* If we swapped two blocks connected to the same net, its bounding box *
        -: 1382:	     * doesn't change.                                                      */
        -: 1383:
 17007588: 1384:	    if(net_block_moved[k] == FROM_AND_TO)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
  1370823: 1385:		continue;
        -: 1386:
 15636765: 1387:	    if(net[inet].num_sinks < SMALL_NET)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -: 1388:		{
 12628718: 1389:		    get_non_updateable_bb(inet, &bb_coord_new[bb_index]);
call    0 returned 100%
        -: 1390:		}
        -: 1391:	    else
        -: 1392:		{
  3008047: 1393:		    if(net_block_moved[k] == FROM)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
  3173710: 1394:			update_bb(inet, &bb_coord_new[bb_index],
call    0 returned 100%
  1586855: 1395:				  &bb_edge_new[bb_index], x_from, y_from,
        -: 1396:				  x_to, y_to);
        -: 1397:		    else
  2842384: 1398:			update_bb(inet, &bb_coord_new[bb_index],
call    0 returned 100%
  1421192: 1399:				  &bb_edge_new[bb_index], x_to, y_to, x_from,
        -: 1400:				  y_from);
        -: 1401:		}
        -: 1402:
 15636765: 1403:	    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1404:		{
 31273530: 1405:		    temp_net_cost[inet] =
 15636765: 1406:			get_net_cost(inet, &bb_coord_new[bb_index]);
call    0 returned 100%
 15636765: 1407:		    bb_delta_c += temp_net_cost[inet] - net_cost[inet];
        -: 1408:		}
        -: 1409:	    else
        -: 1410:		{
        -: 1411:		    /* Rip up, then replace with new bb. */
    #####: 1412:		    update_region_occ(inet, &bb_coords[inet], -1,
call    0 never executed
        -: 1413:				      num_regions);
    #####: 1414:		    update_region_occ(inet, &bb_coord_new[bb_index], 1,
call    0 never executed
        -: 1415:				      num_regions);
        -: 1416:		}
        -: 1417:
 15636765: 1418:	    bb_index++;
        -: 1419:	}
        -: 1420:
   848146: 1421:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1422:	{
    #####: 1423:	    newcost = nonlinear_cong_cost(num_regions);
call    0 never executed
    #####: 1424:	    bb_delta_c = newcost - *bb_cost;
        -: 1425:	}
        -: 1426:
        -: 1427:
   848146: 1428:    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1429:       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 1430:	{
        -: 1431:	    /*in this case we redefine delta_c as a combination of timing and bb.  *
        -: 1432:	     *additionally, we normalize all values, therefore delta_c is in       *
        -: 1433:	     *relation to 1*/
        -: 1434:
   848146: 1435:	    comp_delta_td_cost(b_from, b_to, num_of_pins, &timing_delta_c,
call    0 returned 100%
        -: 1436:			       &delay_delta_c);
        -: 1437:
   848146: 1438:	    delta_c =
   848146: 1439:		(1 - timing_tradeoff) * bb_delta_c * inverse_prev_bb_cost +
   848146: 1440:		timing_tradeoff * timing_delta_c * inverse_prev_timing_cost;
        -: 1441:	}
        -: 1442:    else
        -: 1443:	{
        -: 1444:	    delta_c = bb_delta_c;
        -: 1445:	}
        -: 1446:
        -: 1447:
   848146: 1448:    keep_switch = assess_swap(delta_c, t);
call    0 returned 100%
        -: 1449:
        -: 1450:    /* 1 -> move accepted, 0 -> rejected. */
        -: 1451:
   848146: 1452:    if(keep_switch)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        -: 1453:	{
   386965: 1454:	    *cost = *cost + delta_c;
   386965: 1455:	    *bb_cost = *bb_cost + bb_delta_c;
        -: 1456:
        -: 1457:
   386965: 1458:	    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1459:	       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 1460:		{
        -: 1461:		    /*update the point_to_point_timing_cost and point_to_point_delay_cost 
        -: 1462:		     * values from the temporary values */
   386965: 1463:		    *timing_cost = *timing_cost + timing_delta_c;
   386965: 1464:		    *delay_cost = *delay_cost + delay_delta_c;
        -: 1465:
   386965: 1466:		    update_td_cost(b_from, b_to, num_of_pins);
call    0 returned 100%
        -: 1467:		}
        -: 1468:
        -: 1469:	    /* update net cost functions and reset flags. */
        -: 1470:
        -: 1471:	    bb_index = 0;
        -: 1472:
  3819743: 1473:	    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 1474:		{
  3819743: 1475:		    inet = nets_to_update[k];
        -: 1476:
        -: 1477:		    /* If we swapped two blocks connected to the same net, its bounding box *
        -: 1478:		     * doesn't change.                                                      */
        -: 1479:
  3819743: 1480:		    if(net_block_moved[k] == FROM_AND_TO)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1481:			{
   249425: 1482:			    temp_net_cost[inet] = -1;
   249425: 1483:			    continue;
        -: 1484:			}
        -: 1485:
  3570318: 1486:		    bb_coords[inet] = bb_coord_new[bb_index];
  3570318: 1487:		    if(net[inet].num_sinks >= SMALL_NET)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
   780989: 1488:			bb_num_on_edges[inet] = bb_edge_new[bb_index];
        -: 1489:
  3570318: 1490:		    bb_index++;
        -: 1491:
  3570318: 1492:		    net_cost[inet] = temp_net_cost[inet];
  3570318: 1493:		    temp_net_cost[inet] = -1;
        -: 1494:		}
        -: 1495:
        -: 1496:	    /* Update fb data structures since we kept the move. */
        -: 1497:	    /* Swap physical location */
   386965: 1498:	    grid[x_to][y_to].blocks[z_to] = b_from;
   386965: 1499:	    grid[x_from][y_from].blocks[z_from] = b_to;
        -: 1500:
   386965: 1501:	    if(EMPTY == b_to)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1502:		{		/* Moved to an empty location */
   130769: 1503:		    grid[x_to][y_to].usage++;
   130769: 1504:		    grid[x_from][y_from].usage--;
        -: 1505:		}
        -: 1506:	}
        -: 1507:
        -: 1508:    else
        -: 1509:	{			/* Move was rejected.  */
        -: 1510:
        -: 1511:	    /* Reset the net cost function flags first. */
 13187845: 1512:	    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -: 1513:		{
 13187845: 1514:		    inet = nets_to_update[k];
 13187845: 1515:		    temp_net_cost[inet] = -1;
        -: 1516:		}
        -: 1517:
        -: 1518:	    /* Restore the block data structures to their state before the move. */
   461181: 1519:	    block[b_from].x = x_from;
   461181: 1520:	    block[b_from].y = y_from;
   461181: 1521:	    block[b_from].z = z_from;
   461181: 1522:	    if(b_to != EMPTY)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        -: 1523:		{
   414380: 1524:		    block[b_to].x = x_to;
   414380: 1525:		    block[b_to].y = y_to;
   414380: 1526:		    block[b_to].z = z_to;
        -: 1527:		}
        -: 1528:
        -: 1529:	    /* Restore the region occupancies to their state before the move. */
   461181: 1530:	    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1531:		{
    #####: 1532:		    restore_region_occ(old_region_occ_x, old_region_occ_y,
call    0 never executed
        -: 1533:				       num_regions);
        -: 1534:		}
        -: 1535:	}
        -: 1536:
        -: 1537:    return (keep_switch);
        -: 1538:}
        -: 1539:
        -: 1540:
        -: 1541:static void
function save_region_occ called 0 returned 0% blocks executed 0%
    #####: 1542:save_region_occ(float **old_region_occ_x,
        -: 1543:		float **old_region_occ_y,
        -: 1544:		int num_regions)
        -: 1545:{
        -: 1546:
        -: 1547:    /* Saves the old occupancies of the placement subregions in case the  *
        -: 1548:     * current move is not accepted.  Used only for NONLINEAR_CONG.       */
        -: 1549:
        -: 1550:    int i, j;
        -: 1551:
    #####: 1552:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1553:	{
    #####: 1554:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1555:		{
    #####: 1556:		    old_region_occ_x[i][j] = place_region_x[i][j].occupancy;
    #####: 1557:		    old_region_occ_y[i][j] = place_region_y[i][j].occupancy;
        -: 1558:		}
        -: 1559:	}
    #####: 1560:}
        -: 1561:
        -: 1562:
        -: 1563:static void
function restore_region_occ called 0 returned 0% blocks executed 0%
    #####: 1564:restore_region_occ(float **old_region_occ_x,
        -: 1565:		   float **old_region_occ_y,
        -: 1566:		   int num_regions)
        -: 1567:{
        -: 1568:
        -: 1569:    /* Restores the old occupancies of the placement subregions when the  *
        -: 1570:     * current move is not accepted.  Used only for NONLINEAR_CONG.       */
        -: 1571:
        -: 1572:    int i, j;
        -: 1573:
    #####: 1574:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1575:	{
    #####: 1576:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1577:		{
    #####: 1578:		    place_region_x[i][j].occupancy = old_region_occ_x[i][j];
    #####: 1579:		    place_region_y[i][j].occupancy = old_region_occ_y[i][j];
        -: 1580:		}
        -: 1581:	}
    #####: 1582:}
        -: 1583:
        -: 1584:
        -: 1585:static int
function find_affected_nets called 848146 returned 100% blocks executed 93%
   848146: 1586:find_affected_nets(int *nets_to_update,
        -: 1587:		   int *net_block_moved,
        -: 1588:		   int b_from,
        -: 1589:		   int b_to,
        -: 1590:		   int num_of_pins)
        -: 1591:{
        -: 1592:
        -: 1593:    /* Puts a list of all the nets connected to b_from and b_to into          *
        -: 1594:     * nets_to_update.  Returns the number of affected nets.  Net_block_moved *
        -: 1595:     * is either FROM, TO or FROM_AND_TO -- the block connected to this net   *
        -: 1596:     * that has moved.                                                        */
        -: 1597:
        -: 1598:    int k, inet, affected_index, count;
        -: 1599:
   848146: 1600:    affected_index = 0;
        -: 1601:
 20058892: 1602:    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1603:	{
 19210746: 1604:	    inet = block[b_from].nets[k];
        -: 1605:
 19210746: 1606:	    if(inet == OPEN)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
  9068900: 1607:		continue;
        -: 1608:
 10141846: 1609:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   390178: 1610:		continue;
        -: 1611:
        -: 1612:	    /* This is here in case the same block connects to a net twice. */
        -: 1613:
  9751668: 1614:	    if(temp_net_cost[inet] > 0.)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   367872: 1615:		continue;
        -: 1616:
  9383796: 1617:	    nets_to_update[affected_index] = inet;
  9383796: 1618:	    net_block_moved[affected_index] = FROM;
  9383796: 1619:	    affected_index++;
  9383796: 1620:	    temp_net_cost[inet] = 1.;	/* Flag to say we've marked this net. */
        -: 1621:	}
        -: 1622:
   848146: 1623:    if(b_to != EMPTY)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1624:	{
 17004936: 1625:	    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1626:		{
 17004936: 1627:		    inet = block[b_to].nets[k];
        -: 1628:
 17004936: 1629:		    if(inet == OPEN)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
  7441852: 1630:			continue;
        -: 1631:
  9563084: 1632:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   381772: 1633:			continue;
        -: 1634:
  9181312: 1635:		    if(temp_net_cost[inet] > 0.)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1636:			{	/* Net already marked. */
 11391282: 1637:			    for(count = 0; count < affected_index; count++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1638:				{
 12948802: 1639:				    if(nets_to_update[count] == inet)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1640:					{
  1557520: 1641:					    if(net_block_moved[count] == FROM)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
  1370823: 1642:						net_block_moved[count] =
        -: 1643:						    FROM_AND_TO;
        -: 1644:					    break;
        -: 1645:					}
        -: 1646:				}
        -: 1647:
        -: 1648:#ifdef DEBUG
  1557520: 1649:			    if(count > affected_index)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1650:				{
        -: 1651:				    printf
    #####: 1652:					("Error in find_affected_nets -- count = %d,"
call    0 never executed
        -: 1653:					 " affected index = %d.\n", count,
        -: 1654:					 affected_index);
    #####: 1655:				    exit(1);
call    0 never executed
        -: 1656:				}
        -: 1657:#endif
        -: 1658:			}
        -: 1659:
        -: 1660:		    else
        -: 1661:			{	/* Net not marked yet. */
        -: 1662:
  7623792: 1663:			    nets_to_update[affected_index] = inet;
  7623792: 1664:			    net_block_moved[affected_index] = TO;
  7623792: 1665:			    affected_index++;
  7623792: 1666:			    temp_net_cost[inet] = 1.;	/* Flag means we've  marked net. */
        -: 1667:			}
        -: 1668:		}
        -: 1669:	}
        -: 1670:
   848146: 1671:    return (affected_index);
        -: 1672:}
        -: 1673:
        -: 1674:
        -: 1675:static boolean
function find_to called 869998 returned 100% blocks executed 89%
   869998: 1676:find_to(int x_from,
        -: 1677:	int y_from,
        -: 1678:	t_type_ptr type,
        -: 1679:	float rlim,
        -: 1680:	int *x_lookup,
        -: 1681:	int *x_to,
        -: 1682:	int *y_to)
        -: 1683:{
        -: 1684:
        -: 1685:    /* Returns the point to which I want to swap, properly range limited. 
        -: 1686:     * rlim must always be between 1 and nx (inclusive) for this routine  
        -: 1687:     * to work.  Assumes that a column only contains blocks of the same type.
        -: 1688:     */
        -: 1689:
        -: 1690:    int x_rel, y_rel, iside, iplace, rlx, rly, min_x, max_x, min_y, max_y;
        -: 1691:    int num_col_same_type, i, j;
        -: 1692:
   869998: 1693:    rlx = min(nx, rlim);	/* Only needed when nx < ny. */
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   869998: 1694:    rly = min(ny, rlim);	/* Added rly for aspect_ratio != 1 case. */
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1695:
   869998: 1696:    min_x = max(1, x_from - rlx);
   869998: 1697:    max_x = min(nx, x_from + rlx);
   869998: 1698:    min_y = max(1, y_from - rly);
   869998: 1699:    max_y = min(ny, y_from + rly);
        -: 1700:
   869998: 1701:    num_col_same_type = 0;
   869998: 1702:    j = 0;
   869998: 1703:    if(type != IO_TYPE)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        -: 1704:	{
  3089964: 1705:	    for(i = min_x; i <= max_x; i++)
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
        -: 1706:		{
  3089964: 1707:		    if(grid[i][1].type == type)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1708:			{
  2063464: 1709:			    num_col_same_type++;
  2063464: 1710:			    x_lookup[j] = i;
  2063464: 1711:			    j++;
        -: 1712:			}
        -: 1713:		}
   472605: 1714:	    assert(num_col_same_type != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   533364: 1715:	    if(num_col_same_type == 1 &&
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
    60759: 1716:	       ((((max_y - min_y) / type->height) - 1) <= 0
    38907: 1717:		|| type->height > (ny / 2)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1718:		return FALSE;
        -: 1719:	}
        -: 1720:
        -: 1721:#ifdef DEBUG
   848146: 1722:    if(rlx < 1 || rlx > nx)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1723:	{
    #####: 1724:	    printf("Error in find_to: rlx = %d\n", rlx);
call    0 never executed
    #####: 1725:	    exit(1);
call    0 never executed
        -: 1726:	}
        -: 1727:#endif
        -: 1728:
        -: 1729:    do
        -: 1730:	{			/* Until (x_to, y_to) different from (x_from, y_from) */
  1031237: 1731:	    if(type == IO_TYPE)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1732:		{		/* io_block to be moved. */
   491361: 1733:		    if(rlx >= nx)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 1734:			{
   133534: 1735:			    iside = my_irand(3);
call    0 returned 100%
        -: 1736:			    /*                              *
        -: 1737:			     *       +-----1----+           *
        -: 1738:			     *       |          |           *
        -: 1739:			     *       |          |           *
        -: 1740:			     *       0          2           *
        -: 1741:			     *       |          |           *
        -: 1742:			     *       |          |           *
        -: 1743:			     *       +-----3----+           *
        -: 1744:			     *                              */
   133534: 1745:			    switch (iside)
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 0%
        -: 1746:				{
        -: 1747:				case 0:
    33463: 1748:				    iplace = my_irand(ny - 1) + 1;
call    0 returned 100%
    33463: 1749:				    *x_to = 0;
    33463: 1750:				    *y_to = iplace;
    33463: 1751:				    break;
        -: 1752:				case 1:
    33614: 1753:				    iplace = my_irand(nx - 1) + 1;
call    0 returned 100%
    33614: 1754:				    *x_to = iplace;
    33614: 1755:				    *y_to = ny + 1;
    33614: 1756:				    break;
        -: 1757:				case 2:
    33127: 1758:				    iplace = my_irand(ny - 1) + 1;
call    0 returned 100%
    33127: 1759:				    *x_to = nx + 1;
    33127: 1760:				    *y_to = iplace;
    33127: 1761:				    break;
        -: 1762:				case 3:
    33330: 1763:				    iplace = my_irand(nx - 1) + 1;
call    0 returned 100%
    33330: 1764:				    *x_to = iplace;
    33330: 1765:				    *y_to = 0;
    33330: 1766:				    break;
        -: 1767:				default:
        -: 1768:				    printf
    #####: 1769:					("Error in find_to.  Unexpected io swap location.\n");
call    0 never executed
    #####: 1770:				    exit(1);
call    0 never executed
        -: 1771:				}
        -: 1772:			}
        -: 1773:		    else
        -: 1774:			{	/* rlx is less than whole chip */
   357827: 1775:			    if(x_from == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1776:				{
   119587: 1777:				    iplace = my_irand(2 * rly);
call    0 returned 100%
   119587: 1778:				    *y_to = y_from - rly + iplace;
   119587: 1779:				    *x_to = x_from;
   119587: 1780:				    if(*y_to > ny)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1781:					{
     8143: 1782:					    *y_to = ny + 1;
     8143: 1783:					    *x_to = my_irand(rlx - 1) + 1;
call    0 returned 100%
        -: 1784:					}
   111444: 1785:				    else if(*y_to < 1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1786:					{
     7550: 1787:					    *y_to = 0;
     7550: 1788:					    *x_to = my_irand(rlx - 1) + 1;
call    0 returned 100%
        -: 1789:					}
        -: 1790:				}
   238240: 1791:			    else if(x_from == nx + 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -: 1792:				{
    53795: 1793:				    iplace = my_irand(2 * rly);
call    0 returned 100%
    53795: 1794:				    *y_to = y_from - rly + iplace;
    53795: 1795:				    *x_to = x_from;
    53795: 1796:				    if(*y_to > ny)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1797:					{
     5181: 1798:					    *y_to = ny + 1;
     5181: 1799:					    *x_to = nx - my_irand(rlx - 1);
call    0 returned 100%
        -: 1800:					}
    48614: 1801:				    else if(*y_to < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1802:					{
     4372: 1803:					    *y_to = 0;
     4372: 1804:					    *x_to = nx - my_irand(rlx - 1);
call    0 returned 100%
        -: 1805:					}
        -: 1806:				}
   184445: 1807:			    else if(y_from == 0)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -: 1808:				{
    75239: 1809:				    iplace = my_irand(2 * rlx);
call    0 returned 100%
    75239: 1810:				    *x_to = x_from - rlx + iplace;
    75239: 1811:				    *y_to = y_from;
    75239: 1812:				    if(*x_to > nx)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1813:					{
     4370: 1814:					    *x_to = nx + 1;
     4370: 1815:					    *y_to = my_irand(rly - 1) + 1;
call    0 returned 100%
        -: 1816:					}
    70869: 1817:				    else if(*x_to < 1)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1818:					{
     7252: 1819:					    *x_to = 0;
     7252: 1820:					    *y_to = my_irand(rly - 1) + 1;
call    0 returned 100%
        -: 1821:					}
        -: 1822:				}
        -: 1823:			    else
        -: 1824:				{	/* *y_from == ny + 1 */
   109206: 1825:				    iplace = my_irand(2 * rlx);
call    0 returned 100%
   109206: 1826:				    *x_to = x_from - rlx + iplace;
   109206: 1827:				    *y_to = y_from;
   109206: 1828:				    if(*x_to > nx)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1829:					{
     5407: 1830:					    *x_to = nx + 1;
     5407: 1831:					    *y_to = ny - my_irand(rly - 1);
call    0 returned 100%
        -: 1832:					}
   103799: 1833:				    else if(*x_to < 1)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1834:					{
     8233: 1835:					    *x_to = 0;
     8233: 1836:					    *y_to = ny - my_irand(rly - 1);
call    0 returned 100%
        -: 1837:					}
        -: 1838:				}
        -: 1839:			}	/* End rlx if */
        -: 1840:		}		/* end type if */
        -: 1841:	    else
        -: 1842:		{
   539876: 1843:		    x_rel = my_irand(num_col_same_type - 1);
call    0 returned 100%
   539876: 1844:		    y_rel =
call    0 returned 100%
   539876: 1845:			my_irand(max
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1846:				 (0, ((max_y - min_y) / type->height) - 1));
   539876: 1847:		    *x_to = x_lookup[x_rel];
   539876: 1848:		    *y_to = min_y + y_rel * type->height;
   539876: 1849:		    *y_to = (*y_to) - grid[*x_to][*y_to].offset;	/* align it */
   539876: 1850:		    assert(*x_to >= 1 && *x_to <= nx);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
   539876: 1851:		    assert(*y_to >= 1 && *y_to <= ny);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -: 1852:		}
        -: 1853:	}
  1031237: 1854:    while((x_from == *x_to) && (y_from == *y_to));
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
branch  2 taken 43%
branch  3 taken 57% (fallthrough)
        -: 1855:
        -: 1856:#ifdef DEBUG
   848146: 1857:    if(*x_to < 0 || *x_to > nx + 1 || *y_to < 0 || *y_to > ny + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 1858:	{
    #####: 1859:	    printf("Error in routine find_to:  (x_to,y_to) = (%d,%d)\n",
call    0 never executed
        -: 1860:		   *x_to, *y_to);
    #####: 1861:	    exit(1);
call    0 never executed
        -: 1862:	}
        -: 1863:#endif
   848146: 1864:    assert(type == grid[*x_to][*y_to].type);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1865:    return TRUE;
        -: 1866:}
        -: 1867:
        -: 1868:
        -: 1869:static int
function assess_swap called 848146 returned 100% blocks executed 100%
   848146: 1870:assess_swap(float delta_c,
        -: 1871:	    float t)
        -: 1872:{
        -: 1873:
        -: 1874:    /* Returns: 1 -> move accepted, 0 -> rejected. */
        -: 1875:
        -: 1876:    int accept;
        -: 1877:    float prob_fac, fnum;
        -: 1878:
   848146: 1879:    if(delta_c <= 0)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1880:	{
        -: 1881:
        -: 1882:#ifdef SPEC			/* Reduce variation in final solution due to round off */
        -: 1883:	    fnum = my_frand();
        -: 1884:#endif
        -: 1885:
        -: 1886:	    accept = 1;
        -: 1887:	    return (accept);
        -: 1888:	}
        -: 1889:
   644609: 1890:    if(t == 0.)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1891:	return (0);
        -: 1892:
   638248: 1893:    fnum = my_frand();
call    0 returned 100%
   638248: 1894:    prob_fac = exp(-delta_c / t);
   638248: 1895:    if(prob_fac > fnum)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1896:	{
        -: 1897:	    accept = 1;
        -: 1898:	}
        -: 1899:    else
        -: 1900:	{
   454820: 1901:	    accept = 0;
        -: 1902:	}
   638248: 1903:    return (accept);
        -: 1904:}
        -: 1905:
        -: 1906:
        -: 1907:static float
function recompute_bb_cost called 15 returned 100% blocks executed 53%
       15: 1908:recompute_bb_cost(int place_cost_type,
        -: 1909:		  int num_regions)
        -: 1910:{
        -: 1911:
        -: 1912:    /* Recomputes the cost to eliminate roundoff that may have accrued.  *
        -: 1913:     * This routine does as little work as possible to compute this new  *
        -: 1914:     * cost.                                                             */
        -: 1915:
        -: 1916:    int i, j, inet;
        -: 1917:    float cost;
        -: 1918:
       15: 1919:    cost = 0;
        -: 1920:
        -: 1921:    /* Initialize occupancies to zero if regions are being used. */
        -: 1922:
       15: 1923:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1924:	{
    #####: 1925:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1926:		{
    #####: 1927:		    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1928:			{
    #####: 1929:			    place_region_x[i][j].occupancy = 0.;
    #####: 1930:			    place_region_y[i][j].occupancy = 0.;
        -: 1931:			}
        -: 1932:		}
        -: 1933:	}
        -: 1934:
     7665: 1935:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1936:	{			/* for each net ... */
        -: 1937:
     7665: 1938:	    if(net[inet].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1939:		{		/* Do only if not global. */
        -: 1940:
        -: 1941:		    /* Bounding boxes don't have to be recomputed; they're correct. */
        -: 1942:
     7650: 1943:		    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1944:			{
     7650: 1945:			    cost += net_cost[inet];
        -: 1946:			}
        -: 1947:		    else
        -: 1948:			{	/* Must be nonlinear_cong case. */
    #####: 1949:			    update_region_occ(inet, &bb_coords[inet], 1,
call    0 never executed
        -: 1950:					      num_regions);
        -: 1951:			}
        -: 1952:		}
        -: 1953:	}
        -: 1954:
       15: 1955:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1956:	{
    #####: 1957:	    cost = nonlinear_cong_cost(num_regions);
call    0 never executed
        -: 1958:	}
        -: 1959:
       15: 1960:    return (cost);
        -: 1961:}
        -: 1962:
        -: 1963:
        -: 1964:static float
function comp_td_point_to_point_delay called 25584958 returned 100% blocks executed 61%
 25584958: 1965:comp_td_point_to_point_delay(int inet,
        -: 1966:			     int ipin)
        -: 1967:{
        -: 1968:
        -: 1969:    /*returns the delay of one point to point connection */
        -: 1970:
        -: 1971:    int source_block, sink_block;
        -: 1972:    int delta_x, delta_y;
        -: 1973:    t_type_ptr source_type, sink_type;
        -: 1974:    float delay_source_to_sink;
        -: 1975:
 25584958: 1976:    delay_source_to_sink = 0.;
        -: 1977:
 25584958: 1978:    source_block = net[inet].node_block[0];
 25584958: 1979:    source_type = block[source_block].type;
        -: 1980:
 25584958: 1981:    sink_block = net[inet].node_block[ipin];
 25584958: 1982:    sink_type = block[sink_block].type;
        -: 1983:
 25584958: 1984:    assert(source_type != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
 25584958: 1985:    assert(sink_type != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1986:
 25584958: 1987:    delta_x = abs(block[sink_block].x - block[source_block].x);
 25584958: 1988:    delta_y = abs(block[sink_block].y - block[source_block].y);
        -: 1989:
        -: 1990:    /* TODO low priority: Could be merged into one look-up table */
        -: 1991:    /* Note: This heuristic is terrible on Quality of Results.  
        -: 1992:     * A much better heuristic is to create a more comprehensive lookup table but
        -: 1993:     * it's too late in the release cycle to do this.  Pushing until the next release */
 25584958: 1994:    if(source_type == IO_TYPE)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 1995:	{
  4592870: 1996:	    if(sink_type == IO_TYPE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1997:		delay_source_to_sink = delta_io_to_io[delta_x][delta_y];
        -: 1998:	    else
  4592870: 1999:		delay_source_to_sink = delta_io_to_fb[delta_x][delta_y];
        -: 2000:	}
        -: 2001:    else
        -: 2002:	{
 20992088: 2003:	    if(sink_type == IO_TYPE)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   617662: 2004:		delay_source_to_sink = delta_fb_to_io[delta_x][delta_y];
        -: 2005:	    else
 20374426: 2006:		delay_source_to_sink = delta_fb_to_fb[delta_x][delta_y];
        -: 2007:	}
 25584958: 2008:    if(delay_source_to_sink < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2009:	{
        -: 2010:	    printf
    #####: 2011:		("Error in comp_td_point_to_point_delay in place.c, bad delay_source_to_sink value\n");
call    0 never executed
    #####: 2012:	    exit(1);
call    0 never executed
        -: 2013:	}
        -: 2014:
 25584958: 2015:    if(delay_source_to_sink < 0.)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2016:	{
        -: 2017:	    printf
    #####: 2018:		("Error in comp_td_point_to_point_delay in place.c, delay is less than 0\n");
call    0 never executed
    #####: 2019:	    exit(1);
call    0 never executed
        -: 2020:	}
        -: 2021:
 25584958: 2022:    return (delay_source_to_sink);
        -: 2023:}
        -: 2024:
        -: 2025:
        -: 2026:
        -: 2027:static void
function update_td_cost called 386965 returned 100% blocks executed 100%
   386965: 2028:update_td_cost(int b_from,
        -: 2029:	       int b_to,
        -: 2030:	       int num_of_pins)
        -: 2031:{
        -: 2032:    /*update the point_to_point_timing_cost values from the temporary */
        -: 2033:    /*values for all connections that have changed */
        -: 2034:
        -: 2035:    int blkpin, net_pin, inet, ipin;
        -: 2036:
  6286162: 2037:    for(blkpin = 0; blkpin < num_of_pins; blkpin++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -: 2038:	{
        -: 2039:
  5899197: 2040:	    inet = block[b_from].nets[blkpin];
        -: 2041:
  5899197: 2042:	    if(inet == OPEN)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
  3613976: 2043:		continue;
        -: 2044:
  2285221: 2045:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    86060: 2046:		continue;
        -: 2047:
  2199161: 2048:	    net_pin = net_pin_index[b_from][blkpin];
        -: 2049:
  2199161: 2050:	    if(net_pin != 0)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 2051:		{
        -: 2052:
        -: 2053:		    /*the following "if" prevents the value from being updated twice */
  1485334: 2054:		    if(net[inet].node_block[0] != b_to
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1466161: 2055:		       && net[inet].node_block[0] != b_from)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2056:			{
        -: 2057:
  2932322: 2058:			    point_to_point_delay_cost[inet][net_pin] =
  1466161: 2059:				temp_point_to_point_delay_cost[inet][net_pin];
  1466161: 2060:			    temp_point_to_point_delay_cost[inet][net_pin] =
        -: 2061:				-1;
        -: 2062:
  2932322: 2063:			    point_to_point_timing_cost[inet][net_pin] =
  1466161: 2064:				temp_point_to_point_timing_cost[inet]
  1466161: 2065:				[net_pin];
  1466161: 2066:			    temp_point_to_point_timing_cost[inet][net_pin] =
        -: 2067:				-1;
        -: 2068:			}
        -: 2069:		}
        -: 2070:	    else
        -: 2071:		{		/*this net is being driven by a moved block, recompute */
        -: 2072:		    /*all point to point connections on this net. */
  2212356: 2073:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -: 2074:			{
        -: 2075:
  4424712: 2076:			    point_to_point_delay_cost[inet][ipin] =
  2212356: 2077:				temp_point_to_point_delay_cost[inet][ipin];
  2212356: 2078:			    temp_point_to_point_delay_cost[inet][ipin] = -1;
        -: 2079:
  4424712: 2080:			    point_to_point_timing_cost[inet][ipin] =
  2212356: 2081:				temp_point_to_point_timing_cost[inet][ipin];
  2212356: 2082:			    temp_point_to_point_timing_cost[inet][ipin] = -1;
        -: 2083:			}
        -: 2084:		}
        -: 2085:	}
        -: 2086:
   386965: 2087:    if(b_to != EMPTY)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 2088:	{
  4608612: 2089:	    for(blkpin = 0; blkpin < num_of_pins; blkpin++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -: 2090:		{
        -: 2091:
  4608612: 2092:		    inet = block[b_to].nets[blkpin];
        -: 2093:
  4608612: 2094:		    if(inet == OPEN)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
  2537390: 2095:			continue;
        -: 2096:
  2071222: 2097:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    82463: 2098:			continue;
        -: 2099:
  1988759: 2100:		    net_pin = net_pin_index[b_to][blkpin];
        -: 2101:
  1988759: 2102:		    if(net_pin != 0)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 2103:			{
        -: 2104:
        -: 2105:			    /*the following "if" prevents the value from being updated 2x */
  1361731: 2106:			    if(net[inet].node_block[0] != b_to
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1361731: 2107:			       && net[inet].node_block[0] != b_from)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2108:				{
        -: 2109:
  2684958: 2110:				    point_to_point_delay_cost[inet][net_pin] =
  1342479: 2111:					temp_point_to_point_delay_cost[inet]
  1342479: 2112:					[net_pin];
        -: 2113:				    temp_point_to_point_delay_cost[inet]
  1342479: 2114:					[net_pin] = -1;
        -: 2115:
  1342479: 2116:				    point_to_point_timing_cost[inet][net_pin]
  1342479: 2117:					=
  1342479: 2118:					temp_point_to_point_timing_cost[inet]
  1342479: 2119:					[net_pin];
        -: 2120:				    temp_point_to_point_timing_cost[inet]
  1342479: 2121:					[net_pin] = -1;
        -: 2122:				}
        -: 2123:			}
        -: 2124:		    else
        -: 2125:			{	/*this net is being driven by a moved block, recompute */
        -: 2126:			    /*all point to point connections on this net. */
  1627508: 2127:			    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -: 2128:				{
        -: 2129:
  3255016: 2130:				    point_to_point_delay_cost[inet][ipin] =
  1627508: 2131:					temp_point_to_point_delay_cost[inet]
  1627508: 2132:					[ipin];
        -: 2133:				    temp_point_to_point_delay_cost[inet][ipin]
  1627508: 2134:					= -1;
        -: 2135:
  3255016: 2136:				    point_to_point_timing_cost[inet][ipin] =
  1627508: 2137:					temp_point_to_point_timing_cost[inet]
  1627508: 2138:					[ipin];
        -: 2139:				    temp_point_to_point_timing_cost[inet]
  1627508: 2140:					[ipin] = -1;
        -: 2141:				}
        -: 2142:			}
        -: 2143:		}
        -: 2144:	}
   386965: 2145:}
        -: 2146:
        -: 2147:
        -: 2148:static void
function comp_delta_td_cost called 848146 returned 100% blocks executed 100%
   848146: 2149:comp_delta_td_cost(int b_from,
        -: 2150:		   int b_to,
        -: 2151:		   int num_of_pins,
        -: 2152:		   float *delta_timing,
        -: 2153:		   float *delta_delay)
        -: 2154:{
        -: 2155:
        -: 2156:    /*a net that is being driven by a moved block must have all of its  */
        -: 2157:    /*sink timing costs recomputed. A net that is driving a moved block */
        -: 2158:    /*must only have the timing cost on the connection driving the input */
        -: 2159:    /*pin computed */
        -: 2160:
        -: 2161:    int inet, k, net_pin, ipin;
        -: 2162:    float delta_timing_cost, delta_delay_cost, temp_delay;
        -: 2163:
   848146: 2164:    delta_timing_cost = 0.;
   848146: 2165:    delta_delay_cost = 0.;
        -: 2166:
        -: 2167:
 20058892: 2168:    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 2169:	{
 19210746: 2170:	    inet = block[b_from].nets[k];
        -: 2171:
 19210746: 2172:	    if(inet == OPEN)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
  9068900: 2173:		continue;
        -: 2174:
 10141846: 2175:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   390178: 2176:		continue;
        -: 2177:
  9751668: 2178:	    net_pin = net_pin_index[b_from][k];
        -: 2179:
  9751668: 2180:	    if(net_pin != 0)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 2181:		{		/*this net is driving a moved block               */
        -: 2182:
        -: 2183:		    /*if this net is being driven by a block that has moved, we do not  */
        -: 2184:		    /*need to compute the change in the timing cost (here) since it will */
        -: 2185:		    /*be computed in the fanout of the net on  the driving block, also  */
        -: 2186:		    /*computing it here would double count the change, and mess up the  */
        -: 2187:		    /*delta_timing_cost value */
  6724811: 2188:		    if(net[inet].node_block[0] != b_to
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
  6572710: 2189:		       && net[inet].node_block[0] != b_from)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2190:			{
  6572710: 2191:			    temp_delay =
call    0 returned 100%
        -: 2192:				comp_td_point_to_point_delay(inet, net_pin);
        -: 2193:
  6572710: 2194:			    temp_point_to_point_delay_cost[inet][net_pin] =
        -: 2195:				temp_delay;
 13145420: 2196:			    temp_point_to_point_timing_cost[inet][net_pin] =
  6572710: 2197:				timing_place_crit[inet][net_pin] * temp_delay;
        -: 2198:
  6572710: 2199:			    delta_delay_cost +=
  6572710: 2200:				temp_point_to_point_delay_cost[inet][net_pin]
  6572710: 2201:				- point_to_point_delay_cost[inet][net_pin];
        -: 2202:
  6572710: 2203:			    delta_timing_cost +=
        -: 2204:				temp_point_to_point_timing_cost[inet][net_pin]
  6572710: 2205:				- point_to_point_timing_cost[inet][net_pin];
        -: 2206:			}
        -: 2207:		}
        -: 2208:	    else
        -: 2209:		{		/*this net is being driven by a moved block, recompute */
        -: 2210:		    /*all point to point connections on this net. */
  6655780: 2211:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 2212:			{
  6655780: 2213:			    temp_delay =
call    0 returned 100%
        -: 2214:				comp_td_point_to_point_delay(inet, ipin);
        -: 2215:
  6655780: 2216:			    temp_point_to_point_delay_cost[inet][ipin] =
        -: 2217:				temp_delay;
 13311560: 2218:			    temp_point_to_point_timing_cost[inet][ipin] =
  6655780: 2219:				timing_place_crit[inet][ipin] * temp_delay;
        -: 2220:
  6655780: 2221:			    delta_delay_cost +=
 13311560: 2222:				temp_point_to_point_delay_cost[inet][ipin] -
  6655780: 2223:				point_to_point_delay_cost[inet][ipin];
        -: 2224:
  6655780: 2225:			    delta_timing_cost +=
  6655780: 2226:				temp_point_to_point_timing_cost[inet][ipin] -
  6655780: 2227:				point_to_point_timing_cost[inet][ipin];
        -: 2228:			}
        -: 2229:		}
        -: 2230:	}
        -: 2231:
   848146: 2232:    if(b_to != EMPTY)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 2233:	{
 17004936: 2234:	    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 2235:		{
 17004936: 2236:		    inet = block[b_to].nets[k];
        -: 2237:
 17004936: 2238:		    if(inet == OPEN)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
  7441852: 2239:			continue;
        -: 2240:
  9563084: 2241:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   381772: 2242:			continue;
        -: 2243:
  9181312: 2244:		    net_pin = net_pin_index[b_to][k];
        -: 2245:
  9181312: 2246:		    if(net_pin != 0)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 2247:			{	/*this net is driving a moved block */
        -: 2248:
        -: 2249:			    /*if this net is being driven by a block that has moved, we do not */
        -: 2250:			    /*need to compute the change in the timing cost (here) since it was */
        -: 2251:			    /*computed in the fanout of the net on  the driving block, also    */
        -: 2252:			    /*computing it here would double count the change, and mess up the */
        -: 2253:			    /*delta_timing_cost value */
  6279756: 2254:			    if(net[inet].node_block[0] != b_to
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  6279756: 2255:			       && net[inet].node_block[0] != b_from)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 2256:				{
  6099020: 2257:				    temp_delay =
call    0 returned 100%
        -: 2258:					comp_td_point_to_point_delay(inet,
        -: 2259:								     net_pin);
        -: 2260:
  6099020: 2261:				    temp_point_to_point_delay_cost[inet]
  6099020: 2262:					[net_pin] = temp_delay;
  6099020: 2263:				    temp_point_to_point_timing_cost[inet]
 12198040: 2264:					[net_pin] =
  6099020: 2265:					timing_place_crit[inet][net_pin] *
        -: 2266:					temp_delay;
        -: 2267:
  6099020: 2268:				    delta_delay_cost +=
        -: 2269:					temp_point_to_point_delay_cost[inet]
 12198040: 2270:					[net_pin] -
  6099020: 2271:					point_to_point_delay_cost[inet]
  6099020: 2272:					[net_pin];
  6099020: 2273:				    delta_timing_cost +=
        -: 2274:					temp_point_to_point_timing_cost[inet]
  6099020: 2275:					[net_pin] -
  6099020: 2276:					point_to_point_timing_cost[inet]
  6099020: 2277:					[net_pin];
        -: 2278:				}
        -: 2279:			}
        -: 2280:		    else
        -: 2281:			{	/*this net is being driven by a moved block, recompute */
        -: 2282:			    /*all point to point connections on this net. */
  6097459: 2283:			    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -: 2284:				{
        -: 2285:
  6097459: 2286:				    temp_delay =
call    0 returned 100%
        -: 2287:					comp_td_point_to_point_delay(inet,
        -: 2288:								     ipin);
        -: 2289:
  6097459: 2290:				    temp_point_to_point_delay_cost[inet][ipin]
  6097459: 2291:					= temp_delay;
  6097459: 2292:				    temp_point_to_point_timing_cost[inet]
 12194918: 2293:					[ipin] =
  6097459: 2294:					timing_place_crit[inet][ipin] *
        -: 2295:					temp_delay;
        -: 2296:
        -: 2297:
  6097459: 2298:				    delta_delay_cost +=
        -: 2299:					temp_point_to_point_delay_cost[inet]
 12194918: 2300:					[ipin] -
  6097459: 2301:					point_to_point_delay_cost[inet][ipin];
  6097459: 2302:				    delta_timing_cost +=
        -: 2303:					temp_point_to_point_timing_cost[inet]
  6097459: 2304:					[ipin] -
  6097459: 2305:					point_to_point_timing_cost[inet]
  6097459: 2306:					[ipin];
        -: 2307:				}
        -: 2308:			}
        -: 2309:		}
        -: 2310:	}
        -: 2311:
   848146: 2312:    *delta_timing = delta_timing_cost;
   848146: 2313:    *delta_delay = delta_delay_cost;
   848146: 2314:}
        -: 2315:
        -: 2316:static void
function comp_td_costs called 139 returned 100% blocks executed 100%
      139: 2317:comp_td_costs(float *timing_cost,
        -: 2318:	      float *connection_delay_sum)
        -: 2319:{
        -: 2320:    /*computes the cost (from scratch) due to the delays and criticalities*
        -: 2321:     *on all point to point connections, we define the timing cost of     *
        -: 2322:     *each connection as criticality*delay */
        -: 2323:
        -: 2324:    int inet, ipin;
        -: 2325:    float loc_timing_cost, loc_connection_delay_sum, temp_delay_cost,
        -: 2326:	temp_timing_cost;
        -: 2327:
      139: 2328:    loc_timing_cost = 0.;
      139: 2329:    loc_connection_delay_sum = 0.;
        -: 2330:
    71168: 2331:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2332:	{			/* for each net ... */
    71029: 2333:	    if(net[inet].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2334:		{		/* Do only if not global. */
        -: 2335:
   159989: 2336:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 2337:			{
        -: 2338:
   159989: 2339:			    temp_delay_cost =
call    0 returned 100%
        -: 2340:				comp_td_point_to_point_delay(inet, ipin);
   159989: 2341:			    temp_timing_cost =
        -: 2342:				temp_delay_cost *
   159989: 2343:				timing_place_crit[inet][ipin];
        -: 2344:
   159989: 2345:			    loc_connection_delay_sum += temp_delay_cost;
   159989: 2346:			    point_to_point_delay_cost[inet][ipin] =
        -: 2347:				temp_delay_cost;
   159989: 2348:			    temp_point_to_point_delay_cost[inet][ipin] = -1;	/*undefined */
        -: 2349:
   159989: 2350:			    point_to_point_timing_cost[inet][ipin] =
        -: 2351:				temp_timing_cost;
   159989: 2352:			    temp_point_to_point_timing_cost[inet][ipin] = -1;	/*undefined */
   159989: 2353:			    loc_timing_cost += temp_timing_cost;
        -: 2354:			}
        -: 2355:		}
        -: 2356:	}
      139: 2357:    *timing_cost = loc_timing_cost;
      139: 2358:    *connection_delay_sum = loc_connection_delay_sum;
      139: 2359:}
        -: 2360:
        -: 2361:
        -: 2362:static float
function comp_bb_cost called 2 returned 100% blocks executed 69%
        2: 2363:comp_bb_cost(int method,
        -: 2364:	     int place_cost_type,
        -: 2365:	     int num_regions)
        -: 2366:{
        -: 2367:
        -: 2368:    /* Finds the cost from scratch.  Done only when the placement   *
        -: 2369:     * has been radically changed (i.e. after initial placement).   *
        -: 2370:     * Otherwise find the cost change incrementally.  If method     *
        -: 2371:     * check is NORMAL, we find bounding boxes that are updateable  *
        -: 2372:     * for the larger nets.  If method is CHECK, all bounding boxes *
        -: 2373:     * are found via the non_updateable_bb routine, to provide a    *
        -: 2374:     * cost which can be used to check the correctness of the       *
        -: 2375:     * other routine.                                               */
        -: 2376:
        -: 2377:    int i, j, k;
        -: 2378:    float cost;
        -: 2379:    double expected_wirelength;
        -: 2380:
        2: 2381:    cost = 0;
        2: 2382:    expected_wirelength = 0.0;
        -: 2383:
        -: 2384:    /* Initialize occupancies to zero if regions are being used. */
        -: 2385:
        2: 2386:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2387:	{
    #####: 2388:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2389:		{
    #####: 2390:		    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2391:			{
    #####: 2392:			    place_region_x[i][j].occupancy = 0.;
    #####: 2393:			    place_region_y[i][j].occupancy = 0.;
        -: 2394:			}
        -: 2395:		}
        -: 2396:	}
        -: 2397:
     1022: 2398:    for(k = 0; k < num_nets; k++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2399:	{			/* for each net ... */
        -: 2400:
     1022: 2401:	    if(net[k].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2402:		{		/* Do only if not global. */
        -: 2403:
        -: 2404:		    /* Small nets don't use incremental updating on their bounding boxes, *
        -: 2405:		     * so they can use a fast bounding box calculator.                    */
        -: 2406:
     1020: 2407:		    if(net[k].num_sinks >= SMALL_NET && method == NORMAL)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -: 2408:			{
       72: 2409:			    get_bb_from_scratch(k, &bb_coords[k],
call    0 returned 100%
       36: 2410:						&bb_num_on_edges[k]);
        -: 2411:			}
        -: 2412:		    else
        -: 2413:			{
      984: 2414:			    get_non_updateable_bb(k, &bb_coords[k]);
call    0 returned 100%
        -: 2415:			}
        -: 2416:
     1020: 2417:		    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2418:			{
     1020: 2419:			    net_cost[k] = get_net_cost(k, &bb_coords[k]);
call    0 returned 100%
     1020: 2420:			    cost += net_cost[k];
     1020: 2421:			    if(method == CHECK)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      510: 2422:				expected_wirelength +=
      510: 2423:				    get_net_wirelength_estimate(k,
call    0 returned 100%
        -: 2424:								&bb_coords
        -: 2425:								[k]);
        -: 2426:			}
        -: 2427:		    else
        -: 2428:			{	/* Must be nonlinear_cong case. */
    #####: 2429:			    update_region_occ(k, &bb_coords[k], 1,
call    0 never executed
        -: 2430:					      num_regions);
        -: 2431:			}
        -: 2432:		}
        -: 2433:	}
        -: 2434:
        2: 2435:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2436:	{
    #####: 2437:	    cost = nonlinear_cong_cost(num_regions);
call    0 never executed
        -: 2438:	}
        -: 2439:
        2: 2440:    if(method == CHECK)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 2441:	printf("BB estimate of min-dist (placement) wirelength is ;%.0f\n",
call    0 returned 100%
        -: 2442:	       expected_wirelength);
        -: 2443:
        2: 2444:    return (cost);
        -: 2445:}
        -: 2446:
        -: 2447:
        -: 2448:static float
function nonlinear_cong_cost called 0 returned 0% blocks executed 0%
    #####: 2449:nonlinear_cong_cost(int num_regions)
        -: 2450:{
        -: 2451:
        -: 2452:    /* This routine computes the cost of a placement when the NONLINEAR_CONG *
        -: 2453:     * option is selected.  It assumes that the occupancies of all the       *
        -: 2454:     * placement subregions have been properly updated, and simply           *
        -: 2455:     * computes the cost due to these occupancies by summing over all        *
        -: 2456:     * subregions.  This will be inefficient for moves that don't affect     *
        -: 2457:     * many subregions (i.e. small moves late in placement), esp. when there *
        -: 2458:     * are a lot of subregions.  May recode later to update only affected    *
        -: 2459:     * subregions.                                                           */
        -: 2460:
        -: 2461:    float cost, tmp;
        -: 2462:    int i, j;
        -: 2463:
    #####: 2464:    cost = 0.;
        -: 2465:
    #####: 2466:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2467:	{
    #####: 2468:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2469:		{
        -: 2470:
        -: 2471:		    /* Many different cost metrics possible.  1st try:  */
        -: 2472:
    #####: 2473:		    if(place_region_x[i][j].occupancy <
branch  0 never executed
branch  1 never executed
    #####: 2474:		       place_region_x[i][j].capacity)
        -: 2475:			{
    #####: 2476:			    cost += place_region_x[i][j].occupancy *
    #####: 2477:				place_region_x[i][j].inv_capacity;
        -: 2478:			}
        -: 2479:		    else
        -: 2480:			{	/* Overused region -- penalize. */
        -: 2481:
    #####: 2482:			    tmp = place_region_x[i][j].occupancy *
    #####: 2483:				place_region_x[i][j].inv_capacity;
    #####: 2484:			    cost += tmp * tmp;
        -: 2485:			}
        -: 2486:
    #####: 2487:		    if(place_region_y[i][j].occupancy <
branch  0 never executed
branch  1 never executed
    #####: 2488:		       place_region_y[i][j].capacity)
        -: 2489:			{
    #####: 2490:			    cost += place_region_y[i][j].occupancy *
    #####: 2491:				place_region_y[i][j].inv_capacity;
        -: 2492:			}
        -: 2493:		    else
        -: 2494:			{	/* Overused region -- penalize. */
        -: 2495:
    #####: 2496:			    tmp = place_region_y[i][j].occupancy *
    #####: 2497:				place_region_y[i][j].inv_capacity;
    #####: 2498:			    cost += tmp * tmp;
        -: 2499:			}
        -: 2500:
        -: 2501:		}
        -: 2502:	}
        -: 2503:
    #####: 2504:    return (cost);
        -: 2505:}
        -: 2506:
        -: 2507:
        -: 2508:static void
function update_region_occ called 0 returned 0% blocks executed 0%
    #####: 2509:update_region_occ(int inet,
        -: 2510:		  struct s_bb *coords,
        -: 2511:		  int add_or_sub,
        -: 2512:		  int num_regions)
        -: 2513:{
        -: 2514:
        -: 2515:    /* Called only when the place_cost_type is NONLINEAR_CONG.  If add_or_sub *
        -: 2516:     * is 1, this uses the new net bounding box to increase the occupancy     *
        -: 2517:     * of some regions.  If add_or_sub = - 1, it decreases the occupancy      *
        -: 2518:     * by that due to this bounding box.                                      */
        -: 2519:
        -: 2520:    float net_xmin, net_xmax, net_ymin, net_ymax, crossing;
        -: 2521:    float inv_region_len, inv_region_height;
        -: 2522:    float inv_bb_len, inv_bb_height;
        -: 2523:    float overlap_xlow, overlap_xhigh, overlap_ylow, overlap_yhigh;
        -: 2524:    float y_overlap, x_overlap, x_occupancy, y_occupancy;
        -: 2525:    int imin, imax, jmin, jmax, i, j;
        -: 2526:
    #####: 2527:    if(net[inet].num_sinks >= 50)
branch  0 never executed
branch  1 never executed
        -: 2528:	{
    #####: 2529:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 2530:	}
        -: 2531:    else
        -: 2532:	{
    #####: 2533:	    crossing = cross_count[net[inet].num_sinks];
        -: 2534:	}
        -: 2535:
    #####: 2536:    net_xmin = coords->xmin - 0.5;
    #####: 2537:    net_xmax = coords->xmax + 0.5;
    #####: 2538:    net_ymin = coords->ymin - 0.5;
    #####: 2539:    net_ymax = coords->ymax + 0.5;
        -: 2540:
        -: 2541:    /* I could precompute the two values below.  Should consider this. */
        -: 2542:
    #####: 2543:    inv_region_len = (float)num_regions / (float)nx;
    #####: 2544:    inv_region_height = (float)num_regions / (float)ny;
        -: 2545:
        -: 2546:    /* Get integer coordinates defining the rectangular area in which the *
        -: 2547:     * subregions have to be updated.  Formula is as follows:  subtract   *
        -: 2548:     * 0.5 from net_xmin, etc. to get numbers from 0 to nx or ny;         *
        -: 2549:     * divide by nx or ny to scale between 0 and 1; multiply by           *
        -: 2550:     * num_regions to scale between 0 and num_regions; and truncate to    *
        -: 2551:     * get the final answer.                                              */
        -: 2552:
    #####: 2553:    imin = (int)(net_xmin - 0.5) * inv_region_len;
    #####: 2554:    imax = (int)(net_xmax - 0.5) * inv_region_len;
    #####: 2555:    imax = min(imax, num_regions - 1);	/* Watch for weird roundoff */
branch  0 never executed
branch  1 never executed
        -: 2556:
    #####: 2557:    jmin = (int)(net_ymin - 0.5) * inv_region_height;
    #####: 2558:    jmax = (int)(net_ymax - 0.5) * inv_region_height;
    #####: 2559:    jmax = min(jmax, num_regions - 1);	/* Watch for weird roundoff */
branch  0 never executed
branch  1 never executed
        -: 2560:
    #####: 2561:    inv_bb_len = 1. / (net_xmax - net_xmin);
    #####: 2562:    inv_bb_height = 1. / (net_ymax - net_ymin);
        -: 2563:
        -: 2564:    /* See RISA paper (ICCAD '94, pp. 690 - 695) for a description of why *
        -: 2565:     * I use exactly this cost function.                                  */
        -: 2566:
    #####: 2567:    for(i = imin; i <= imax; i++)
branch  0 never executed
branch  1 never executed
        -: 2568:	{
    #####: 2569:	    for(j = jmin; j <= jmax; j++)
branch  0 never executed
branch  1 never executed
        -: 2570:		{
    #####: 2571:		    overlap_xlow = max(place_region_bounds_x[i], net_xmin);
branch  0 never executed
branch  1 never executed
    #####: 2572:		    overlap_xhigh =
    #####: 2573:			min(place_region_bounds_x[i + 1], net_xmax);
branch  0 never executed
branch  1 never executed
    #####: 2574:		    overlap_ylow = max(place_region_bounds_y[j], net_ymin);
branch  0 never executed
branch  1 never executed
    #####: 2575:		    overlap_yhigh =
    #####: 2576:			min(place_region_bounds_y[j + 1], net_ymax);
branch  0 never executed
branch  1 never executed
        -: 2577:
    #####: 2578:		    x_overlap = overlap_xhigh - overlap_xlow;
    #####: 2579:		    y_overlap = overlap_yhigh - overlap_ylow;
        -: 2580:
        -: 2581:#ifdef DEBUG
        -: 2582:
    #####: 2583:		    if(x_overlap < -0.001)
branch  0 never executed
branch  1 never executed
        -: 2584:			{
        -: 2585:			    printf
    #####: 2586:				("Error in update_region_occ:  x_overlap < 0"
call    0 never executed
        -: 2587:				 "\n inet = %d, overlap = %g\n", inet,
        -: 2588:				 x_overlap);
        -: 2589:			}
        -: 2590:
    #####: 2591:		    if(y_overlap < -0.001)
branch  0 never executed
branch  1 never executed
        -: 2592:			{
        -: 2593:			    printf
    #####: 2594:				("Error in update_region_occ:  y_overlap < 0"
call    0 never executed
        -: 2595:				 "\n inet = %d, overlap = %g\n", inet,
        -: 2596:				 y_overlap);
        -: 2597:			}
        -: 2598:#endif
        -: 2599:
        -: 2600:
    #####: 2601:		    x_occupancy =
    #####: 2602:			crossing * y_overlap * x_overlap * inv_bb_height *
        -: 2603:			inv_region_len;
    #####: 2604:		    y_occupancy =
    #####: 2605:			crossing * x_overlap * y_overlap * inv_bb_len *
        -: 2606:			inv_region_height;
        -: 2607:
    #####: 2608:		    place_region_x[i][j].occupancy +=
    #####: 2609:			add_or_sub * x_occupancy;
    #####: 2610:		    place_region_y[i][j].occupancy +=
    #####: 2611:			add_or_sub * y_occupancy;
        -: 2612:		}
        -: 2613:	}
        -: 2614:
    #####: 2615:}
        -: 2616:
        -: 2617:
        -: 2618:static void
function free_place_regions called 0 returned 0% blocks executed 0%
    #####: 2619:free_place_regions(int num_regions)
        -: 2620:{
        -: 2621:
        -: 2622:    /* Frees the place_regions data structures needed by the NONLINEAR_CONG *
        -: 2623:     * cost function.                                                       */
        -: 2624:
    #####: 2625:    free_matrix(place_region_x, 0, num_regions - 1, 0, sizeof(struct
call    0 never executed
        -: 2626:							      s_place_region));
        -: 2627:
    #####: 2628:    free_matrix(place_region_y, 0, num_regions - 1, 0, sizeof(struct
call    0 never executed
        -: 2629:							      s_place_region));
        -: 2630:
    #####: 2631:    free(place_region_bounds_x);
    #####: 2632:    free(place_region_bounds_y);
    #####: 2633:}
        -: 2634:
        -: 2635:
        -: 2636:static void
function free_placement_structs.isra.4 called 1 returned 100% blocks executed 73%
        1: 2637:free_placement_structs(int place_cost_type,
        -: 2638:		       int num_regions,
        -: 2639:		       float **old_region_occ_x,
        -: 2640:		       float **old_region_occ_y,
        -: 2641:		       struct s_placer_opts placer_opts)
        -: 2642:{
        -: 2643:
        -: 2644:    /* Frees the major structures needed by the placer (and not needed       *
        -: 2645:     * elsewhere).   */
        -: 2646:
        -: 2647:    int inet;
        -: 2648:
        1: 2649:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2650:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####: 2651:       placer_opts.enable_timing_computations)
        -: 2652:	{
      511: 2653:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2654:		{
        -: 2655:		    /*add one to the address since it is indexed from 1 not 0 */
        -: 2656:
      511: 2657:		    point_to_point_delay_cost[inet]++;
      511: 2658:		    free(point_to_point_delay_cost[inet]);
        -: 2659:
      511: 2660:		    point_to_point_timing_cost[inet]++;
      511: 2661:		    free(point_to_point_timing_cost[inet]);
        -: 2662:
      511: 2663:		    temp_point_to_point_delay_cost[inet]++;
      511: 2664:		    free(temp_point_to_point_delay_cost[inet]);
        -: 2665:
      511: 2666:		    temp_point_to_point_timing_cost[inet]++;
      511: 2667:		    free(temp_point_to_point_timing_cost[inet]);
        -: 2668:		}
        1: 2669:	    free(point_to_point_delay_cost);
        1: 2670:	    free(temp_point_to_point_delay_cost);
        -: 2671:
        1: 2672:	    free(point_to_point_timing_cost);
        1: 2673:	    free(temp_point_to_point_timing_cost);
        -: 2674:
        1: 2675:	    free_matrix(net_pin_index, 0, num_blocks - 1, 0, sizeof(int));
call    0 returned 100%
        -: 2676:	}
        -: 2677:
        -: 2678:
        1: 2679:    free(net_cost);
        1: 2680:    free(temp_net_cost);
        1: 2681:    free(bb_num_on_edges);
        1: 2682:    free(bb_coords);
        -: 2683:
        1: 2684:    net_cost = NULL;		/* Defensive coding. */
        1: 2685:    temp_net_cost = NULL;
        1: 2686:    bb_num_on_edges = NULL;
        1: 2687:    bb_coords = NULL;
        -: 2688:
        1: 2689:    free_unique_pin_list();
call    0 returned 100%
        -: 2690:
        1: 2691:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2692:	{
    #####: 2693:	    free_place_regions(num_regions);
call    0 never executed
    #####: 2694:	    free_matrix(old_region_occ_x, 0, num_regions - 1, 0,
call    0 never executed
        -: 2695:			sizeof(float));
    #####: 2696:	    free_matrix(old_region_occ_y, 0, num_regions - 1, 0,
call    0 never executed
        -: 2697:			sizeof(float));
        -: 2698:	}
        -: 2699:
        1: 2700:    else if(place_cost_type == LINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2701:	{
        1: 2702:	    free_fast_cost_update_structs();
call    0 returned 100%
        -: 2703:	}
        1: 2704:}
        -: 2705:
        -: 2706:
        -: 2707:static void
function alloc_and_load_placement_structs.isra.2 called 1 returned 100% blocks executed 86%
        1: 2708:alloc_and_load_placement_structs(int place_cost_type,
        -: 2709:				 int num_regions,
        -: 2710:				 float place_cost_exp,
        -: 2711:				 float ***old_region_occ_x,
        -: 2712:				 float ***old_region_occ_y,
        -: 2713:				 struct s_placer_opts placer_opts)
        -: 2714:{
        -: 2715:
        -: 2716:    /* Allocates the major structures needed only by the placer, primarily for *
        -: 2717:     * computing costs quickly and such.                                       */
        -: 2718:
        -: 2719:    int inet, ipin, max_pins_per_fb, i;
        -: 2720:
        1: 2721:    max_pins_per_fb = 0;
        5: 2722:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 2723:	{
        4: 2724:	    max_pins_per_fb =
        4: 2725:		max(max_pins_per_fb, type_descriptors[i].num_pins);
        -: 2726:	}
        -: 2727:
        1: 2728:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2729:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####: 2730:       placer_opts.enable_timing_computations)
        -: 2731:	{
        -: 2732:	    /*allocate structures associated with timing driven placement */
        -: 2733:	    /* [0..num_nets-1][1..num_pins-1]  */
        1: 2734:	    point_to_point_delay_cost =
        1: 2735:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        1: 2736:	    temp_point_to_point_delay_cost =
        1: 2737:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        -: 2738:
        1: 2739:	    point_to_point_timing_cost =
        1: 2740:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        1: 2741:	    temp_point_to_point_timing_cost =
        1: 2742:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        -: 2743:
        1: 2744:	    net_pin_index =
        1: 2745:		(int **)alloc_matrix(0, num_blocks - 1, 0,
call    0 returned 100%
        -: 2746:				     max_pins_per_fb - 1, sizeof(int));
        -: 2747:
      512: 2748:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2749:		{
        -: 2750:
        -: 2751:		    /* in the following, subract one so index starts at *
        -: 2752:		     * 1 instead of 0 */
     1022: 2753:		    point_to_point_delay_cost[inet] =
      511: 2754:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2755:					   sizeof(float));
      511: 2756:		    point_to_point_delay_cost[inet]--;
        -: 2757:
     1022: 2758:		    temp_point_to_point_delay_cost[inet] =
      511: 2759:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2760:					   sizeof(float));
      511: 2761:		    temp_point_to_point_delay_cost[inet]--;
        -: 2762:
     1022: 2763:		    point_to_point_timing_cost[inet] =
      511: 2764:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2765:					   sizeof(float));
      511: 2766:		    point_to_point_timing_cost[inet]--;
        -: 2767:
     1022: 2768:		    temp_point_to_point_timing_cost[inet] =
      511: 2769:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2770:					   sizeof(float));
      511: 2771:		    temp_point_to_point_timing_cost[inet]--;
        -: 2772:		}
      511: 2773:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2774:		{
     1213: 2775:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -: 2776:			{
     1213: 2777:			    point_to_point_delay_cost[inet][ipin] = 0;
     1213: 2778:			    temp_point_to_point_delay_cost[inet][ipin] = 0;
        -: 2779:			}
        -: 2780:		}
        -: 2781:	}
        -: 2782:
        -: 2783:
        -: 2784:
        -: 2785:
        -: 2786:
        1: 2787:    net_cost = (float *)my_malloc(num_nets * sizeof(float));
call    0 returned 100%
        1: 2788:    temp_net_cost = (float *)my_malloc(num_nets * sizeof(float));
call    0 returned 100%
        -: 2789:
        -: 2790:    /* Used to store costs for moves not yet made and to indicate when a net's   *
        -: 2791:     * cost has been recomputed. temp_net_cost[inet] < 0 means net's cost hasn't *
        -: 2792:     * been recomputed.                                                          */
        -: 2793:
      512: 2794:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      511: 2795:	temp_net_cost[inet] = -1.;
        -: 2796:
        1: 2797:    bb_coords = (struct s_bb *)my_malloc(num_nets * sizeof(struct s_bb));
call    0 returned 100%
        1: 2798:    bb_num_on_edges =
        1: 2799:	(struct s_bb *)my_malloc(num_nets * sizeof(struct s_bb));
call    0 returned 100%
        -: 2800:
        -: 2801:    /* Get a list of pins with no duplicates. */
        -: 2802:
        1: 2803:    alloc_and_load_unique_pin_list();
call    0 returned 100%
        -: 2804:
        -: 2805:    /* Allocate storage for subregion data, if needed. */
        -: 2806:
        1: 2807:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2808:	{
    #####: 2809:	    alloc_place_regions(num_regions);
call    0 never executed
    #####: 2810:	    load_place_regions(num_regions);
call    0 never executed
    #####: 2811:	    *old_region_occ_x = (float **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2812:						       num_regions - 1,
        -: 2813:						       sizeof(float));
    #####: 2814:	    *old_region_occ_y =
    #####: 2815:		(float **)alloc_matrix(0, num_regions - 1, 0, num_regions - 1,
call    0 never executed
        -: 2816:				       sizeof(float));
        -: 2817:	}
        -: 2818:    else
        -: 2819:	{			/* Shouldn't use them; crash hard if I do!   */
        1: 2820:	    *old_region_occ_x = NULL;
        1: 2821:	    *old_region_occ_y = NULL;
        -: 2822:	}
        -: 2823:
        1: 2824:    if(place_cost_type == LINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2825:	{
        1: 2826:	    alloc_and_load_for_fast_cost_update(place_cost_exp);
call    0 returned 100%
        -: 2827:	}
        1: 2828:}
        -: 2829:
        -: 2830:
        -: 2831:static void
function alloc_place_regions called 0 returned 0% blocks executed 0%
    #####: 2832:alloc_place_regions(int num_regions)
        -: 2833:{
        -: 2834:
        -: 2835:    /* Allocates memory for the regional occupancy, cost, etc. counts *
        -: 2836:     * kept when we're using the NONLINEAR_CONG placement cost        *
        -: 2837:     * function.                                                      */
        -: 2838:
    #####: 2839:    place_region_x =
    #####: 2840:	(struct s_place_region **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2841:					       num_regions - 1,
        -: 2842:					       sizeof(struct s_place_region));
        -: 2843:
    #####: 2844:    place_region_y =
    #####: 2845:	(struct s_place_region **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2846:					       num_regions - 1,
        -: 2847:					       sizeof(struct s_place_region));
        -: 2848:
    #####: 2849:    place_region_bounds_x = (float *)my_malloc((num_regions + 1) *
call    0 never executed
        -: 2850:					       sizeof(float));
        -: 2851:
    #####: 2852:    place_region_bounds_y = (float *)my_malloc((num_regions + 1) *
call    0 never executed
        -: 2853:					       sizeof(float));
    #####: 2854:}
        -: 2855:
        -: 2856:
        -: 2857:static void
function load_place_regions called 0 returned 0% blocks executed 0%
    #####: 2858:load_place_regions(int num_regions)
        -: 2859:{
        -: 2860:
        -: 2861:    /* Loads the capacity values in each direction for each of the placement *
        -: 2862:     * regions.  The chip is divided into a num_regions x num_regions array. */
        -: 2863:
        -: 2864:    int i, j, low_block, high_block, rnum;
        -: 2865:    float low_lim, high_lim, capacity, fac, block_capacity;
        -: 2866:    float len_fac, height_fac;
        -: 2867:
        -: 2868:    /* First load up horizontal channel capacities.  */
        -: 2869:
    #####: 2870:    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2871:	{
    #####: 2872:	    capacity = 0.;
    #####: 2873:	    low_lim = (float)j / (float)num_regions *ny + 1.;
    #####: 2874:	    high_lim = (float)(j + 1) / (float)num_regions *ny;
        -: 2875:
    #####: 2876:	    low_block = floor(low_lim);
    #####: 2877:	    low_block = max(1, low_block);	/* Watch for weird roundoff effects. */
    #####: 2878:	    high_block = ceil(high_lim);
    #####: 2879:	    high_block = min(high_block, ny);
        -: 2880:
    #####: 2881:	    block_capacity = (chan_width_x[low_block - 1] +
    #####: 2882:			      chan_width_x[low_block]) / 2.;
    #####: 2883:	    if(low_block == 1)
branch  0 never executed
branch  1 never executed
    #####: 2884:		block_capacity += chan_width_x[0] / 2.;
        -: 2885:
    #####: 2886:	    fac = 1. - (low_lim - low_block);
    #####: 2887:	    capacity += fac * block_capacity;
        -: 2888:
    #####: 2889:	    for(rnum = low_block + 1; rnum < high_block; rnum++)
branch  0 never executed
branch  1 never executed
        -: 2890:		{
    #####: 2891:		    block_capacity =
    #####: 2892:			(chan_width_x[rnum - 1] + chan_width_x[rnum]) / 2.;
    #####: 2893:		    capacity += block_capacity;
        -: 2894:		}
        -: 2895:
    #####: 2896:	    block_capacity = (chan_width_x[high_block - 1] +
    #####: 2897:			      chan_width_x[high_block]) / 2.;
    #####: 2898:	    if(high_block == ny)
branch  0 never executed
branch  1 never executed
    #####: 2899:		block_capacity += chan_width_x[ny] / 2.;
        -: 2900:
    #####: 2901:	    fac = 1. - (high_block - high_lim);
    #####: 2902:	    capacity += fac * block_capacity;
        -: 2903:
    #####: 2904:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2905:		{
    #####: 2906:		    place_region_x[i][j].capacity = capacity;
    #####: 2907:		    place_region_x[i][j].inv_capacity = 1. / capacity;
    #####: 2908:		    place_region_x[i][j].occupancy = 0.;
    #####: 2909:		    place_region_x[i][j].cost = 0.;
        -: 2910:		}
        -: 2911:	}
        -: 2912:
        -: 2913:    /* Now load vertical channel capacities.  */
        -: 2914:
    #####: 2915:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2916:	{
    #####: 2917:	    capacity = 0.;
    #####: 2918:	    low_lim = (float)i / (float)num_regions *nx + 1.;
    #####: 2919:	    high_lim = (float)(i + 1) / (float)num_regions *nx;
        -: 2920:
    #####: 2921:	    low_block = floor(low_lim);
    #####: 2922:	    low_block = max(1, low_block);	/* Watch for weird roundoff effects. */
    #####: 2923:	    high_block = ceil(high_lim);
    #####: 2924:	    high_block = min(high_block, nx);
        -: 2925:
    #####: 2926:	    block_capacity = (chan_width_y[low_block - 1] +
    #####: 2927:			      chan_width_y[low_block]) / 2.;
    #####: 2928:	    if(low_block == 1)
branch  0 never executed
branch  1 never executed
    #####: 2929:		block_capacity += chan_width_y[0] / 2.;
        -: 2930:
    #####: 2931:	    fac = 1. - (low_lim - low_block);
    #####: 2932:	    capacity += fac * block_capacity;
        -: 2933:
    #####: 2934:	    for(rnum = low_block + 1; rnum < high_block; rnum++)
branch  0 never executed
branch  1 never executed
        -: 2935:		{
    #####: 2936:		    block_capacity =
    #####: 2937:			(chan_width_y[rnum - 1] + chan_width_y[rnum]) / 2.;
    #####: 2938:		    capacity += block_capacity;
        -: 2939:		}
        -: 2940:
    #####: 2941:	    block_capacity = (chan_width_y[high_block - 1] +
    #####: 2942:			      chan_width_y[high_block]) / 2.;
    #####: 2943:	    if(high_block == nx)
branch  0 never executed
branch  1 never executed
    #####: 2944:		block_capacity += chan_width_y[nx] / 2.;
        -: 2945:
    #####: 2946:	    fac = 1. - (high_block - high_lim);
    #####: 2947:	    capacity += fac * block_capacity;
        -: 2948:
    #####: 2949:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2950:		{
    #####: 2951:		    place_region_y[i][j].capacity = capacity;
    #####: 2952:		    place_region_y[i][j].inv_capacity = 1. / capacity;
    #####: 2953:		    place_region_y[i][j].occupancy = 0.;
    #####: 2954:		    place_region_y[i][j].cost = 0.;
        -: 2955:		}
        -: 2956:	}
        -: 2957:
        -: 2958:    /* Finally set up the arrays indicating the limits of each of the *
        -: 2959:     * placement subregions.                                          */
        -: 2960:
    #####: 2961:    len_fac = (float)nx / (float)num_regions;
    #####: 2962:    height_fac = (float)ny / (float)num_regions;
        -: 2963:
    #####: 2964:    place_region_bounds_x[0] = 0.5;
    #####: 2965:    place_region_bounds_y[0] = 0.5;
        -: 2966:
    #####: 2967:    for(i = 1; i <= num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2968:	{
    #####: 2969:	    place_region_bounds_x[i] = place_region_bounds_x[i - 1] + len_fac;
    #####: 2970:	    place_region_bounds_y[i] =
    #####: 2971:		place_region_bounds_y[i - 1] + height_fac;
        -: 2972:	}
    #####: 2973:}
        -: 2974:
        -: 2975:
        -: 2976:static void
function free_unique_pin_list called 1 returned 100% blocks executed 100%
        1: 2977:free_unique_pin_list(void)
        -: 2978:{
        -: 2979:
        -: 2980:    /* Frees the unique pin list structures.                               */
        -: 2981:
        -: 2982:    int any_dup, inet;
        -: 2983:
        1: 2984:    any_dup = 0;
        -: 2985:
      512: 2986:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2987:	{
      511: 2988:	    if(duplicate_pins[inet] != 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 2989:		{
        1: 2990:		    free(unique_pin_list[inet]);
        1: 2991:		    any_dup = 1;
        -: 2992:		}
        -: 2993:	}
        -: 2994:
        1: 2995:    if(any_dup != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2996:	free(unique_pin_list);
        -: 2997:
        1: 2998:    free(duplicate_pins);
        1: 2999:}
        -: 3000:
        -: 3001:
        -: 3002:static void
function alloc_and_load_unique_pin_list called 1 returned 100% blocks executed 100%
        1: 3003:alloc_and_load_unique_pin_list(void)
        -: 3004:{
        -: 3005:
        -: 3006:    /* This routine looks for multiple pins going to the same block in the *
        -: 3007:     * pinlist of each net.  If it finds any, it marks that net as having  *
        -: 3008:     * duplicate pins, and creates a new pinlist with no duplicates.  This *
        -: 3009:     * is then used by the updatable bounding box calculation routine for  *
        -: 3010:     * efficiency.                                                         */
        -: 3011:
        -: 3012:    int inet, ipin, bnum, num_dup, any_dups, offset;
        -: 3013:    int *times_listed;		/* [0..num_blocks-1]: number of times a block is   *
        -: 3014:				 * * listed in the pinlist of a net.  Temp. storage. */
        -: 3015:
        1: 3016:    duplicate_pins = my_calloc(num_nets, sizeof(int));
call    0 returned 100%
        1: 3017:    times_listed = my_calloc(num_blocks, sizeof(int));
        1: 3018:    any_dups = 0;
        -: 3019:
      512: 3020:    for(inet = 0; inet < num_nets; inet++)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
        -: 3021:	{
        -: 3022:
        -: 3023:	    num_dup = 0;
        -: 3024:
     1724: 3025:	    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -: 3026:		{
     1724: 3027:		    bnum = net[inet].node_block[ipin];
     1724: 3028:		    times_listed[bnum]++;
     1724: 3029:		    if(times_listed[bnum] > 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       97: 3030:			num_dup++;
        -: 3031:		}
        -: 3032:
      511: 3033:	    if(num_dup > 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 3034:		{		/* Duplicates found.  Make unique pin list. */
        1: 3035:		    duplicate_pins[inet] = num_dup;
        -: 3036:
        1: 3037:		    if(any_dups == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3038:			{	/* This is the first duplicate found */
        1: 3039:			    unique_pin_list =
        1: 3040:				(int **)my_calloc(num_nets, sizeof(int *));
call    0 returned 100%
        1: 3041:			    any_dups = 1;
        -: 3042:			}
        -: 3043:
        2: 3044:		    unique_pin_list[inet] =
        1: 3045:			my_malloc((net[inet].num_sinks + 1 -
call    0 returned 100%
        -: 3046:				   num_dup) * sizeof(int));
        -: 3047:
        1: 3048:		    offset = 0;
      104: 3049:		    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 99%
branch  1 taken 1%
        -: 3050:			{
      103: 3051:			    bnum = net[inet].node_block[ipin];
      103: 3052:			    if(times_listed[bnum] != 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 3053:				{
        6: 3054:				    times_listed[bnum] = 0;
        6: 3055:				    unique_pin_list[inet][offset] = bnum;
        6: 3056:				    offset++;
        -: 3057:				}
        -: 3058:			}
        -: 3059:		}
        -: 3060:
        -: 3061:	    else
        -: 3062:		{		/* No duplicates found.  Reset times_listed. */
     1621: 3063:		    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -: 3064:			{
     1621: 3065:			    bnum = net[inet].node_block[ipin];
     1621: 3066:			    times_listed[bnum] = 0;
        -: 3067:			}
        -: 3068:		}
        -: 3069:	}
        -: 3070:
        1: 3071:    free((void *)times_listed);
        1: 3072:}
        -: 3073:
        -: 3074:
        -: 3075:static void
function get_bb_from_scratch called 315200 returned 100% blocks executed 100%
   315200: 3076:get_bb_from_scratch(int inet,
        -: 3077:		    struct s_bb *coords,
        -: 3078:		    struct s_bb *num_on_edges)
        -: 3079:{
        -: 3080:
        -: 3081:    /* This routine finds the bounding box of each net from scratch (i.e.    *
        -: 3082:     * from only the block location information).  It updates both the       *
        -: 3083:     * coordinate and number of blocks on each edge information.  It         *
        -: 3084:     * should only be called when the bounding box information is not valid. */
        -: 3085:
        -: 3086:    int ipin, bnum, x, y, xmin, xmax, ymin, ymax;
        -: 3087:    int xmin_edge, xmax_edge, ymin_edge, ymax_edge;
        -: 3088:    int n_pins;
        -: 3089:    int *plist;
        -: 3090:
        -: 3091:    /* I need a list of blocks to which this net connects, with no block listed *
        -: 3092:     * more than once, in order to get a proper count of the number on the edge *
        -: 3093:     * of the bounding box.                                                     */
        -: 3094:
   315200: 3095:    if(duplicate_pins[inet] == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 3096:	{
   305925: 3097:	    plist = net[inet].node_block;
   305925: 3098:	    n_pins = net[inet].num_sinks + 1;
        -: 3099:	}
        -: 3100:    else
        -: 3101:	{
     9275: 3102:	    plist = unique_pin_list[inet];
     9275: 3103:	    n_pins = (net[inet].num_sinks + 1) - duplicate_pins[inet];
        -: 3104:	}
        -: 3105:
   315200: 3106:    x = block[plist[0]].x;
   315200: 3107:    y = block[plist[0]].y;
        -: 3108:
   315200: 3109:    x = max(min(x, nx), 1);
   315200: 3110:    y = max(min(y, ny), 1);
        -: 3111:
   315200: 3112:    xmin = x;
   315200: 3113:    ymin = y;
   315200: 3114:    xmax = x;
   315200: 3115:    ymax = y;
   315200: 3116:    xmin_edge = 1;
   315200: 3117:    ymin_edge = 1;
   315200: 3118:    xmax_edge = 1;
   315200: 3119:    ymax_edge = 1;
        -: 3120:
  2400959: 3121:    for(ipin = 1; ipin < n_pins; ipin++)
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
        -: 3122:	{
        -: 3123:
  2085759: 3124:	    bnum = plist[ipin];
  2085759: 3125:	    x = block[bnum].x;
  2085759: 3126:	    y = block[bnum].y;
        -: 3127:
        -: 3128:	    /* Code below counts IO blocks as being within the 1..nx, 1..ny clb array. *
        -: 3129:	     * This is because channels do not go out of the 0..nx, 0..ny range, and   *
        -: 3130:	     * I always take all channels impinging on the bounding box to be within   *
        -: 3131:	     * that bounding box.  Hence, this "movement" of IO blocks does not affect *
        -: 3132:	     * the which channels are included within the bounding box, and it         *
        -: 3133:	     * simplifies the code a lot.                                              */
        -: 3134:
  2085759: 3135:	    x = max(min(x, nx), 1);
  2085759: 3136:	    y = max(min(y, ny), 1);
        -: 3137:
  2085759: 3138:	    if(x == xmin)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 3139:		{
   409153: 3140:		    xmin_edge++;
        -: 3141:		}
  2085759: 3142:	    if(x == xmax)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 3143:		{		/* Recall that xmin could equal xmax -- don't use else */
   332548: 3144:		    xmax_edge++;
        -: 3145:		}
  1753211: 3146:	    else if(x < xmin)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -: 3147:		{
        -: 3148:		    xmin = x;
        -: 3149:		    xmin_edge = 1;
        -: 3150:		}
  1429152: 3151:	    else if(x > xmax)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 3152:		{
   357416: 3153:		    xmax = x;
   357416: 3154:		    xmax_edge = 1;
        -: 3155:		}
        -: 3156:
  2085759: 3157:	    if(y == ymin)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 3158:		{
   242342: 3159:		    ymin_edge++;
        -: 3160:		}
  2085759: 3161:	    if(y == ymax)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3162:		{
   303590: 3163:		    ymax_edge++;
        -: 3164:		}
  1782169: 3165:	    else if(y < ymin)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 3166:		{
        -: 3167:		    ymin = y;
        -: 3168:		    ymin_edge = 1;
        -: 3169:		}
  1411522: 3170:	    else if(y > ymax)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 3171:		{
   355607: 3172:		    ymax = y;
   355607: 3173:		    ymax_edge = 1;
        -: 3174:		}
        -: 3175:	}
        -: 3176:
        -: 3177:    /* Copy the coordinates and number on edges information into the proper   *
        -: 3178:     * structures.                                                            */
        -: 3179:
   315200: 3180:    coords->xmin = xmin;
   315200: 3181:    coords->xmax = xmax;
   315200: 3182:    coords->ymin = ymin;
   315200: 3183:    coords->ymax = ymax;
        -: 3184:
   315200: 3185:    num_on_edges->xmin = xmin_edge;
   315200: 3186:    num_on_edges->xmax = xmax_edge;
   315200: 3187:    num_on_edges->ymin = ymin_edge;
   315200: 3188:    num_on_edges->ymax = ymax_edge;
   315200: 3189:}
        -: 3190:
        -: 3191:
        -: 3192:static double
function get_net_wirelength_estimate called 510 returned 100% blocks executed 83%
      510: 3193:get_net_wirelength_estimate(int inet,
        -: 3194:			    struct s_bb *bbptr)
        -: 3195:{
        -: 3196:
        -: 3197:    /* WMF: Finds the estimate of wirelength due to one net by looking at   *
        -: 3198:     * its coordinate bounding box.                                         */
        -: 3199:
        -: 3200:    double ncost, crossing;
        -: 3201:
        -: 3202:    /* Get the expected "crossing count" of a net, based on its number *
        -: 3203:     * of pins.  Extrapolate for very large nets.                      */
        -: 3204:
      510: 3205:    if(((net[inet].num_sinks + 1) > 50) && ((net[inet].num_sinks + 1) < 85))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3206:	{
    #####: 3207:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 3208:	}
      510: 3209:    else if((net[inet].num_sinks + 1) >= 85)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3210:	{
        1: 3211:	    crossing =
        1: 3212:		2.7933 + 0.011 * (net[inet].num_sinks + 1) -
        1: 3213:		0.0000018 * (net[inet].num_sinks + 1) * (net[inet].num_sinks +
        -: 3214:							 1);
        -: 3215:	}
        -: 3216:    else
        -: 3217:	{
      509: 3218:	    crossing = cross_count[(net[inet].num_sinks + 1) - 1];
        -: 3219:	}
        -: 3220:
        -: 3221:    /* Could insert a check for xmin == xmax.  In that case, assume  *
        -: 3222:     * connection will be made with no bends and hence no x-cost.    *
        -: 3223:     * Same thing for y-cost.                                        */
        -: 3224:
        -: 3225:    /* Cost = wire length along channel * cross_count / average      *
        -: 3226:     * channel capacity.   Do this for x, then y direction and add.  */
        -: 3227:
      510: 3228:    ncost = (bbptr->xmax - bbptr->xmin + 1) * crossing;
        -: 3229:
      510: 3230:    ncost += (bbptr->ymax - bbptr->ymin + 1) * crossing;
        -: 3231:
      510: 3232:    return (ncost);
        -: 3233:}
        -: 3234:
        -: 3235:
        -: 3236:static float
function get_net_cost called 15637785 returned 100% blocks executed 100%
 15637785: 3237:get_net_cost(int inet,
        -: 3238:	     struct s_bb *bbptr)
        -: 3239:{
        -: 3240:
        -: 3241:    /* Finds the cost due to one net by looking at its coordinate bounding  *
        -: 3242:     * box.                                                                 */
        -: 3243:
        -: 3244:    float ncost, crossing;
        -: 3245:
        -: 3246:    /* Get the expected "crossing count" of a net, based on its number *
        -: 3247:     * of pins.  Extrapolate for very large nets.                      */
        -: 3248:
 15637785: 3249:    if((net[inet].num_sinks + 1) > 50)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3250:	{
    19350: 3251:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 3252:	    /*    crossing = 3.0;    Old value  */
        -: 3253:	}
        -: 3254:    else
        -: 3255:	{
 15618435: 3256:	    crossing = cross_count[(net[inet].num_sinks + 1) - 1];
        -: 3257:	}
        -: 3258:
        -: 3259:    /* Could insert a check for xmin == xmax.  In that case, assume  *
        -: 3260:     * connection will be made with no bends and hence no x-cost.    *
        -: 3261:     * Same thing for y-cost.                                        */
        -: 3262:
        -: 3263:    /* Cost = wire length along channel * cross_count / average      *
        -: 3264:     * channel capacity.   Do this for x, then y direction and add.  */
        -: 3265:
 31275570: 3266:    ncost = (bbptr->xmax - bbptr->xmin + 1) * crossing *
 15637785: 3267:	chanx_place_cost_fac[bbptr->ymax][bbptr->ymin - 1];
        -: 3268:
 31275570: 3269:    ncost += (bbptr->ymax - bbptr->ymin + 1) * crossing *
 15637785: 3270:	chany_place_cost_fac[bbptr->xmax][bbptr->xmin - 1];
        -: 3271:
 15637785: 3272:    return (ncost);
        -: 3273:}
        -: 3274:
        -: 3275:
        -: 3276:static void
function get_non_updateable_bb called 12629702 returned 100% blocks executed 100%
 12629702: 3277:get_non_updateable_bb(int inet,
        -: 3278:		      struct s_bb *bb_coord_new)
        -: 3279:{
        -: 3280:
        -: 3281:    /* Finds the bounding box of a net and stores its coordinates in the  *
        -: 3282:     * bb_coord_new data structure.  This routine should only be called   *
        -: 3283:     * for small nets, since it does not determine enough information for *
        -: 3284:     * the bounding box to be updated incrementally later.                *
        -: 3285:     * Currently assumes channels on both sides of the CLBs forming the   *
        -: 3286:     * edges of the bounding box can be used.  Essentially, I am assuming *
        -: 3287:     * the pins always lie on the outside of the bounding box.            */
        -: 3288:
        -: 3289:
        -: 3290:    int k, xmax, ymax, xmin, ymin, x, y;
        -: 3291:
 12629702: 3292:    x = block[net[inet].node_block[0]].x;
 12629702: 3293:    y = block[net[inet].node_block[0]].y;
        -: 3294:
 12629702: 3295:    xmin = x;
 12629702: 3296:    ymin = y;
 12629702: 3297:    xmax = x;
 12629702: 3298:    ymax = y;
        -: 3299:
 32221618: 3300:    for(k = 1; k < (net[inet].num_sinks + 1); k++)
branch  0 taken 61%
branch  1 taken 39% (fallthrough)
        -: 3301:	{
 19591916: 3302:	    x = block[net[inet].node_block[k]].x;
 19591916: 3303:	    y = block[net[inet].node_block[k]].y;
        -: 3304:
 19591916: 3305:	    if(x < xmin)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 3306:		{
        -: 3307:		    xmin = x;
        -: 3308:		}
 12727100: 3309:	    else if(x > xmax)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 3310:		{
  7745959: 3311:		    xmax = x;
        -: 3312:		}
        -: 3313:
 19591916: 3314:	    if(y < ymin)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -: 3315:		{
        -: 3316:		    ymin = y;
        -: 3317:		}
 12157288: 3318:	    else if(y > ymax)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -: 3319:		{
  7068622: 3320:		    ymax = y;
        -: 3321:		}
        -: 3322:	}
        -: 3323:
        -: 3324:    /* Now I've found the coordinates of the bounding box.  There are no *
        -: 3325:     * channels beyond nx and ny, so I want to clip to that.  As well,   *
        -: 3326:     * since I'll always include the channel immediately below and the   *
        -: 3327:     * channel immediately to the left of the bounding box, I want to    *
        -: 3328:     * clip to 1 in both directions as well (since minimum channel index *
        -: 3329:     * is 0).  See route.c for a channel diagram.                        */
        -: 3330:
 12629702: 3331:    bb_coord_new->xmin = max(min(xmin, nx), 1);
 12629702: 3332:    bb_coord_new->ymin = max(min(ymin, ny), 1);
 12629702: 3333:    bb_coord_new->xmax = max(min(xmax, nx), 1);
 12629702: 3334:    bb_coord_new->ymax = max(min(ymax, ny), 1);
 12629702: 3335:}
        -: 3336:
        -: 3337:
        -: 3338:static void
function update_bb called 3008047 returned 100% blocks executed 100%
  3008047: 3339:update_bb(int inet,
        -: 3340:	  struct s_bb *bb_coord_new,
        -: 3341:	  struct s_bb *bb_edge_new,
        -: 3342:	  int xold,
        -: 3343:	  int yold,
        -: 3344:	  int xnew,
        -: 3345:	  int ynew)
        -: 3346:{
        -: 3347:
        -: 3348:    /* Updates the bounding box of a net by storing its coordinates in    *
        -: 3349:     * the bb_coord_new data structure and the number of blocks on each   *
        -: 3350:     * edge in the bb_edge_new data structure.  This routine should only  *
        -: 3351:     * be called for large nets, since it has some overhead relative to   *
        -: 3352:     * just doing a brute force bounding box calculation.  The bounding   *
        -: 3353:     * box coordinate and edge information for inet must be valid before  *
        -: 3354:     * this routine is called.                                            *
        -: 3355:     * Currently assumes channels on both sides of the CLBs forming the   *
        -: 3356:     * edges of the bounding box can be used.  Essentially, I am assuming *
        -: 3357:     * the pins always lie on the outside of the bounding box.            */
        -: 3358:
        -: 3359:    /* IO blocks are considered to be one cell in for simplicity. */
        -: 3360:
  3008047: 3361:    xnew = max(min(xnew, nx), 1);
  3008047: 3362:    ynew = max(min(ynew, ny), 1);
  3008047: 3363:    xold = max(min(xold, nx), 1);
  3008047: 3364:    yold = max(min(yold, ny), 1);
        -: 3365:
        -: 3366:    /* Check if I can update the bounding box incrementally. */
        -: 3367:
  3008047: 3368:    if(xnew < xold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 3369:	{			/* Move to left. */
        -: 3370:
        -: 3371:	    /* Update the xmax fields for coordinates and number of edges first. */
        -: 3372:
   999544: 3373:	    if(xold == bb_coords[inet].xmax)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 3374:		{		/* Old position at xmax. */
   362893: 3375:		    if(bb_num_on_edges[inet].xmax == 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -: 3376:			{
    83700: 3377:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3378:						bb_edge_new);
    83700: 3379:			    return;
        -: 3380:			}
        -: 3381:		    else
        -: 3382:			{
   279193: 3383:			    bb_edge_new->xmax =
   279193: 3384:				bb_num_on_edges[inet].xmax - 1;
   279193: 3385:			    bb_coord_new->xmax = bb_coords[inet].xmax;
        -: 3386:			}
        -: 3387:		}
        -: 3388:
        -: 3389:	    else
        -: 3390:		{		/* Move to left, old postion was not at xmax. */
   636651: 3391:		    bb_coord_new->xmax = bb_coords[inet].xmax;
   636651: 3392:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3393:		}
        -: 3394:
        -: 3395:	    /* Now do the xmin fields for coordinates and number of edges. */
        -: 3396:
   915844: 3397:	    if(xnew < bb_coords[inet].xmin)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 3398:		{		/* Moved past xmin */
   152509: 3399:		    bb_coord_new->xmin = xnew;
   152509: 3400:		    bb_edge_new->xmin = 1;
        -: 3401:		}
        -: 3402:
   763335: 3403:	    else if(xnew == bb_coords[inet].xmin)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 3404:		{		/* Moved to xmin */
   225676: 3405:		    bb_coord_new->xmin = xnew;
   225676: 3406:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin + 1;
        -: 3407:		}
        -: 3408:
        -: 3409:	    else
        -: 3410:		{		/* Xmin unchanged. */
   537659: 3411:		    bb_coord_new->xmin = bb_coords[inet].xmin;
   537659: 3412:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
        -: 3413:		}
        -: 3414:	}
        -: 3415:
        -: 3416:    /* End of move to left case. */
  2008503: 3417:    else if(xnew > xold)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 3418:	{			/* Move to right. */
        -: 3419:
        -: 3420:	    /* Update the xmin fields for coordinates and number of edges first. */
        -: 3421:
  1298462: 3422:	    if(xold == bb_coords[inet].xmin)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 3423:		{		/* Old position at xmin. */
   392912: 3424:		    if(bb_num_on_edges[inet].xmin == 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3425:			{
    60564: 3426:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3427:						bb_edge_new);
    60564: 3428:			    return;
        -: 3429:			}
        -: 3430:		    else
        -: 3431:			{
   332348: 3432:			    bb_edge_new->xmin =
   332348: 3433:				bb_num_on_edges[inet].xmin - 1;
   332348: 3434:			    bb_coord_new->xmin = bb_coords[inet].xmin;
        -: 3435:			}
        -: 3436:		}
        -: 3437:
        -: 3438:	    else
        -: 3439:		{		/* Move to right, old position was not at xmin. */
   905550: 3440:		    bb_coord_new->xmin = bb_coords[inet].xmin;
   905550: 3441:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
        -: 3442:		}
        -: 3443:
        -: 3444:	    /* Now do the xmax fields for coordinates and number of edges. */
        -: 3445:
  1237898: 3446:	    if(xnew > bb_coords[inet].xmax)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 3447:		{		/* Moved past xmax. */
   332512: 3448:		    bb_coord_new->xmax = xnew;
   332512: 3449:		    bb_edge_new->xmax = 1;
        -: 3450:		}
        -: 3451:
   905386: 3452:	    else if(xnew == bb_coords[inet].xmax)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 3453:		{		/* Moved to xmax */
   328018: 3454:		    bb_coord_new->xmax = xnew;
   328018: 3455:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax + 1;
        -: 3456:		}
        -: 3457:
        -: 3458:	    else
        -: 3459:		{		/* Xmax unchanged. */
   577368: 3460:		    bb_coord_new->xmax = bb_coords[inet].xmax;
   577368: 3461:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3462:		}
        -: 3463:	}
        -: 3464:    /* End of move to right case. */
        -: 3465:    else
        -: 3466:	{			/* xnew == xold -- no x motion. */
   710041: 3467:	    bb_coord_new->xmin = bb_coords[inet].xmin;
   710041: 3468:	    bb_coord_new->xmax = bb_coords[inet].xmax;
   710041: 3469:	    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
   710041: 3470:	    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3471:	}
        -: 3472:
        -: 3473:    /* Now account for the y-direction motion. */
        -: 3474:
  2863783: 3475:    if(ynew < yold)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 3476:	{			/* Move down. */
        -: 3477:
        -: 3478:	    /* Update the ymax fields for coordinates and number of edges first. */
        -: 3479:
  1365660: 3480:	    if(yold == bb_coords[inet].ymax)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 3481:		{		/* Old position at ymax. */
   243630: 3482:		    if(bb_num_on_edges[inet].ymax == 1)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 3483:			{
    69462: 3484:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3485:						bb_edge_new);
    69462: 3486:			    return;
        -: 3487:			}
        -: 3488:		    else
        -: 3489:			{
   174168: 3490:			    bb_edge_new->ymax =
   174168: 3491:				bb_num_on_edges[inet].ymax - 1;
   174168: 3492:			    bb_coord_new->ymax = bb_coords[inet].ymax;
        -: 3493:			}
        -: 3494:		}
        -: 3495:
        -: 3496:	    else
        -: 3497:		{		/* Move down, old postion was not at ymax. */
  1122030: 3498:		    bb_coord_new->ymax = bb_coords[inet].ymax;
  1122030: 3499:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3500:		}
        -: 3501:
        -: 3502:	    /* Now do the ymin fields for coordinates and number of edges. */
        -: 3503:
  1296198: 3504:	    if(ynew < bb_coords[inet].ymin)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 3505:		{		/* Moved past ymin */
   345226: 3506:		    bb_coord_new->ymin = ynew;
   345226: 3507:		    bb_edge_new->ymin = 1;
        -: 3508:		}
        -: 3509:
   950972: 3510:	    else if(ynew == bb_coords[inet].ymin)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 3511:		{		/* Moved to ymin */
   202631: 3512:		    bb_coord_new->ymin = ynew;
   202631: 3513:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin + 1;
        -: 3514:		}
        -: 3515:
        -: 3516:	    else
        -: 3517:		{		/* ymin unchanged. */
   748341: 3518:		    bb_coord_new->ymin = bb_coords[inet].ymin;
   748341: 3519:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
        -: 3520:		}
        -: 3521:	}
        -: 3522:    /* End of move down case. */
  1498123: 3523:    else if(ynew > yold)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -: 3524:	{			/* Moved up. */
        -: 3525:
        -: 3526:	    /* Update the ymin fields for coordinates and number of edges first. */
        -: 3527:
  1075263: 3528:	    if(yold == bb_coords[inet].ymin)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -: 3529:		{		/* Old position at ymin. */
   299787: 3530:		    if(bb_num_on_edges[inet].ymin == 1)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 3531:			{
   101438: 3532:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3533:						bb_edge_new);
   101438: 3534:			    return;
        -: 3535:			}
        -: 3536:		    else
        -: 3537:			{
   198349: 3538:			    bb_edge_new->ymin =
   198349: 3539:				bb_num_on_edges[inet].ymin - 1;
   198349: 3540:			    bb_coord_new->ymin = bb_coords[inet].ymin;
        -: 3541:			}
        -: 3542:		}
        -: 3543:
        -: 3544:	    else
        -: 3545:		{		/* Moved up, old position was not at ymin. */
   775476: 3546:		    bb_coord_new->ymin = bb_coords[inet].ymin;
   775476: 3547:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
        -: 3548:		}
        -: 3549:
        -: 3550:	    /* Now do the ymax fields for coordinates and number of edges. */
        -: 3551:
   973825: 3552:	    if(ynew > bb_coords[inet].ymax)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3553:		{		/* Moved past ymax. */
   141617: 3554:		    bb_coord_new->ymax = ynew;
   141617: 3555:		    bb_edge_new->ymax = 1;
        -: 3556:		}
        -: 3557:
   832208: 3558:	    else if(ynew == bb_coords[inet].ymax)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 3559:		{		/* Moved to ymax */
   129819: 3560:		    bb_coord_new->ymax = ynew;
   129819: 3561:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax + 1;
        -: 3562:		}
        -: 3563:
        -: 3564:	    else
        -: 3565:		{		/* ymax unchanged. */
   702389: 3566:		    bb_coord_new->ymax = bb_coords[inet].ymax;
   702389: 3567:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3568:		}
        -: 3569:	}
        -: 3570:    /* End of move up case. */
        -: 3571:    else
        -: 3572:	{			/* ynew == yold -- no y motion. */
   422860: 3573:	    bb_coord_new->ymin = bb_coords[inet].ymin;
   422860: 3574:	    bb_coord_new->ymax = bb_coords[inet].ymax;
   422860: 3575:	    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
   422860: 3576:	    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3577:	}
        -: 3578:}
        -: 3579:
        -: 3580:
        -: 3581:static void
function initial_placement called 1 returned 100% blocks executed 95%
        1: 3582:initial_placement(enum e_pad_loc_type pad_loc_type,
        -: 3583:		  char *pad_loc_file)
        -: 3584:{
        -: 3585:
        -: 3586:    /* Randomly places the blocks to create an initial placement.     */
        -: 3587:    struct s_pos
        -: 3588:    {
        -: 3589:	int x;
        -: 3590:	int y;
        -: 3591:	int z;
        -: 3592:    }
        -: 3593:    **pos;			/* [0..num_types-1][0..type_tsize - 1] */
        -: 3594:    int i, j, k, iblk, choice, type_index, x, y, z;
        -: 3595:    int *count, *index;		/* [0..num_types-1] */
        -: 3596:
        1: 3597:    pos = (struct s_pos **)my_malloc(num_types * sizeof(struct s_pos *));
call    0 returned 100%
        1: 3598:    count = (int *)my_calloc(num_types, sizeof(int));
call    0 returned 100%
        1: 3599:    index = (int *)my_calloc(num_types, sizeof(int));
        -: 3600:
        -: 3601:    /* Initialize all occupancy to zero. */
        -: 3602:
       13: 3603:    for(i = 0; i <= nx + 1; i++)
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
        -: 3604:	{
      144: 3605:	    for(j = 0; j <= ny + 1; j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3606:		{
      144: 3607:		    grid[i][j].usage = 0;
      361: 3608:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3609:			{
      217: 3610:			    grid[i][j].blocks[k] = EMPTY;
      217: 3611:			    if(grid[i][j].offset == 0)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3612:				{
      199: 3613:				    count[grid[i][j].type->index]++;
        -: 3614:				}
        -: 3615:			}
        -: 3616:		}
        -: 3617:	}
        -: 3618:
        4: 3619:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 3620:	{
        8: 3621:	    pos[i] =
        4: 3622:		(struct s_pos *)my_malloc(count[i] * sizeof(struct s_pos));
call    0 returned 100%
        -: 3623:	}
        -: 3624:
       12: 3625:    for(i = 0; i <= nx + 1; i++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3626:	{
      144: 3627:	    for(j = 0; j <= ny + 1; j++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3628:		{
      217: 3629:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3630:			{
      217: 3631:			    if(grid[i][j].offset == 0)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3632:				{
      199: 3633:				    type_index = grid[i][j].type->index;
      199: 3634:				    pos[type_index][index[type_index]].x = i;
      199: 3635:				    pos[type_index][index[type_index]].y = j;
      199: 3636:				    pos[type_index][index[type_index]].z = k;
      199: 3637:				    index[type_index]++;
        -: 3638:				}
        -: 3639:			}
        -: 3640:		}
        -: 3641:	}
        -: 3642:
      138: 3643:    for(iblk = 0; iblk < num_blocks; iblk++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 3644:	{
        -: 3645:	    /* Don't do IOs if the user specifies IOs */
      138: 3646:	    if(!(block[iblk].type == IO_TYPE && pad_loc_type == USER))
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 3647:		{
      138: 3648:		    type_index = block[iblk].type->index;
      138: 3649:		    assert(count[type_index] > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      138: 3650:		    choice = my_irand(count[type_index] - 1);
call    0 returned 100%
      138: 3651:		    x = pos[type_index][choice].x;
      138: 3652:		    y = pos[type_index][choice].y;
      138: 3653:		    z = pos[type_index][choice].z;
      138: 3654:		    grid[x][y].blocks[z] = iblk;
      138: 3655:		    grid[x][y].usage++;
        -: 3656:
        -: 3657:		    /* Ensure randomizer doesn't pick this block again */
      138: 3658:		    pos[type_index][choice] = pos[type_index][count[type_index] - 1];	/* overwrite used block position */
      138: 3659:		    count[type_index]--;
        -: 3660:		}
        -: 3661:	}
        -: 3662:
        1: 3663:    if(pad_loc_type == USER)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3664:	{
    #####: 3665:	    read_user_pad_loc(pad_loc_file);
call    0 never executed
        -: 3666:	}
        -: 3667:
        -: 3668:    /* All the blocks are placed now.  Make the block array agree with the    *
        -: 3669:     * clb array.                                                             */
        -: 3670:
       12: 3671:    for(i = 0; i <= (nx + 1); i++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3672:	{
      144: 3673:	    for(j = 0; j <= (ny + 1); j++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3674:		{
      217: 3675:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3676:			{
      217: 3677:			    assert(grid[i][j].blocks != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      217: 3678:			    iblk = grid[i][j].blocks[k];
        -: 3679:
      217: 3680:			    if(iblk != EMPTY)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 3681:				{
      138: 3682:				    block[iblk].x = i;
      138: 3683:				    block[iblk].y = j;
      138: 3684:				    block[iblk].z = k;
        -: 3685:				}
        -: 3686:			}
        -: 3687:		}
        -: 3688:	}
        -: 3689:
        -: 3690:#ifdef VERBOSE
        -: 3691:    printf("At end of initial_placement.\n");
        -: 3692:    dump_clbs();
        -: 3693:#endif
        4: 3694:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 3695:	{
        4: 3696:	    free(pos[i]);
        -: 3697:	}
        1: 3698:    free(pos);			/* Free the mapping list */
        1: 3699:    free(index);
        1: 3700:    free(count);
        1: 3701:}
        -: 3702:
        -: 3703:
        -: 3704:static void
function free_fast_cost_update_structs called 1 returned 100% blocks executed 100%
        1: 3705:free_fast_cost_update_structs(void)
        -: 3706:{
        -: 3707:
        -: 3708:    /* Frees the structures used to speed up evaluation of the nonlinear   *
        -: 3709:     * congestion cost function.                                           */
        -: 3710:
        -: 3711:    int i;
        -: 3712:
       12: 3713:    for(i = 0; i <= ny; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3714:	free(chanx_place_cost_fac[i]);
        -: 3715:
        1: 3716:    free(chanx_place_cost_fac);
        -: 3717:
       12: 3718:    for(i = 0; i <= nx; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3719:	free(chany_place_cost_fac[i]);
        -: 3720:
        1: 3721:    free(chany_place_cost_fac);
        1: 3722:}
        -: 3723:
        -: 3724:
        -: 3725:static void
function alloc_and_load_for_fast_cost_update called 1 returned 100% blocks executed 100%
        1: 3726:alloc_and_load_for_fast_cost_update(float place_cost_exp)
        -: 3727:{
        -: 3728:
        -: 3729:    /* Allocates and loads the chanx_place_cost_fac and chany_place_cost_fac *
        -: 3730:     * arrays with the inverse of the average number of tracks per channel   *
        -: 3731:     * between [subhigh] and [sublow].  This is only useful for the cost     *
        -: 3732:     * function that takes the length of the net bounding box in each        *
        -: 3733:     * dimension divided by the average number of tracks in that direction.  *
        -: 3734:     * For other cost functions, you don't have to bother calling this       *
        -: 3735:     * routine; when using the cost function described above, however, you   *
        -: 3736:     * must always call this routine after you call init_chan and before     *
        -: 3737:     * you do any placement cost determination.  The place_cost_exp factor   *
        -: 3738:     * specifies to what power the width of the channel should be taken --   *
        -: 3739:     * larger numbers make narrower channels more expensive.                 */
        -: 3740:
        -: 3741:    int low, high, i;
        -: 3742:
        -: 3743:    /* Access arrays below as chan?_place_cost_fac[subhigh][sublow].  Since   *
        -: 3744:     * subhigh must be greater than or equal to sublow, we only need to       *
        -: 3745:     * allocate storage for the lower half of a matrix.                       */
        -: 3746:
        1: 3747:    chanx_place_cost_fac = (float **)my_malloc((ny + 1) * sizeof(float *));
call    0 returned 100%
       12: 3748:    for(i = 0; i <= ny; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3749:	chanx_place_cost_fac[i] = (float *)my_malloc((i + 1) * sizeof(float));
call    0 returned 100%
        -: 3750:
        1: 3751:    chany_place_cost_fac = (float **)my_malloc((nx + 1) * sizeof(float *));
call    0 returned 100%
       12: 3752:    for(i = 0; i <= nx; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3753:	chany_place_cost_fac[i] = (float *)my_malloc((i + 1) * sizeof(float));
call    0 returned 100%
        -: 3754:
        -: 3755:
        -: 3756:    /* First compute the number of tracks between channel high and channel *
        -: 3757:     * low, inclusive, in an efficient manner.                             */
        -: 3758:
        1: 3759:    chanx_place_cost_fac[0][0] = chan_width_x[0];
        -: 3760:
       11: 3761:    for(high = 1; high <= ny; high++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 3762:	{
       10: 3763:	    chanx_place_cost_fac[high][high] = chan_width_x[high];
       65: 3764:	    for(low = 0; low < high; low++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 3765:		{
      110: 3766:		    chanx_place_cost_fac[high][low] =
       55: 3767:			chanx_place_cost_fac[high - 1][low] +
        -: 3768:			chan_width_x[high];
        -: 3769:		}
        -: 3770:	}
        -: 3771:
        -: 3772:    /* Now compute the inverse of the average number of tracks per channel *
        -: 3773:     * between high and low.  The cost function divides by the average     *
        -: 3774:     * number of tracks per channel, so by storing the inverse I convert   *
        -: 3775:     * this to a faster multiplication.  Take this final number to the     *
        -: 3776:     * place_cost_exp power -- numbers other than one mean this is no      *
        -: 3777:     * longer a simple "average number of tracks"; it is some power of     *
        -: 3778:     * that, allowing greater penalization of narrow channels.             */
        -: 3779:
       11: 3780:    for(high = 0; high <= ny; high++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       66: 3781:	for(low = 0; low <= high; low++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 3782:	    {
      132: 3783:		chanx_place_cost_fac[high][low] = (high - low + 1.) /
       66: 3784:		    chanx_place_cost_fac[high][low];
       66: 3785:		chanx_place_cost_fac[high][low] =
       66: 3786:		    pow((double)chanx_place_cost_fac[high][low],
        -: 3787:			(double)place_cost_exp);
        -: 3788:	    }
        -: 3789:
        -: 3790:
        -: 3791:    /* Now do the same thing for the y-directed channels.  First get the  *
        -: 3792:     * number of tracks between channel high and channel low, inclusive.  */
        -: 3793:
        1: 3794:    chany_place_cost_fac[0][0] = chan_width_y[0];
        -: 3795:
       11: 3796:    for(high = 1; high <= nx; high++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 3797:	{
       10: 3798:	    chany_place_cost_fac[high][high] = chan_width_y[high];
       65: 3799:	    for(low = 0; low < high; low++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 3800:		{
      110: 3801:		    chany_place_cost_fac[high][low] =
       55: 3802:			chany_place_cost_fac[high - 1][low] +
        -: 3803:			chan_width_y[high];
        -: 3804:		}
        -: 3805:	}
        -: 3806:
        -: 3807:    /* Now compute the inverse of the average number of tracks per channel * 
        -: 3808:     * between high and low.  Take to specified power.                     */
        -: 3809:
       11: 3810:    for(high = 0; high <= nx; high++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       66: 3811:	for(low = 0; low <= high; low++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 3812:	    {
      132: 3813:		chany_place_cost_fac[high][low] = (high - low + 1.) /
       66: 3814:		    chany_place_cost_fac[high][low];
       66: 3815:		chany_place_cost_fac[high][low] =
       66: 3816:		    pow((double)chany_place_cost_fac[high][low],
        -: 3817:			(double)place_cost_exp);
        -: 3818:	    }
        1: 3819:}
        -: 3820:
        -: 3821:
        -: 3822:static void
function check_place called 1 returned 100% blocks executed 69%
        1: 3823:check_place(float bb_cost,
        -: 3824:	    float timing_cost,
        -: 3825:	    int place_cost_type,
        -: 3826:	    int num_regions,
        -: 3827:	    enum e_place_algorithm place_algorithm,
        -: 3828:	    float delay_cost)
        -: 3829:{
        -: 3830:
        -: 3831:    /* Checks that the placement has not confused our data structures. *
        -: 3832:     * i.e. the clb and block structures agree about the locations of  *
        -: 3833:     * every block, blocks are in legal spots, etc.  Also recomputes   *
        -: 3834:     * the final placement cost from scratch and makes sure it is      *
        -: 3835:     * within roundoff of what we think the cost is.                   */
        -: 3836:
        -: 3837:    static int *bdone;
        1: 3838:    int i, j, k, error = 0, bnum;
        -: 3839:    float bb_cost_check;
        -: 3840:    int usage_check;
        -: 3841:    float timing_cost_check, delay_cost_check;
        -: 3842:
        1: 3843:    bb_cost_check = comp_bb_cost(CHECK, place_cost_type, num_regions);
call    0 returned 100%
        1: 3844:    printf("bb_cost recomputed from scratch is %g.\n", bb_cost_check);
call    0 returned 100%
        1: 3845:    if(fabs(bb_cost_check - bb_cost) > bb_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3846:	{
        -: 3847:	    printf
    #####: 3848:		("Error:  bb_cost_check: %g and bb_cost: %g differ in check_place.\n",
        -: 3849:		 bb_cost_check, bb_cost);
    #####: 3850:	    error++;
call    0 never executed
        -: 3851:	}
        -: 3852:
        1: 3853:    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3854:       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 3855:	{
        1: 3856:	    comp_td_costs(&timing_cost_check, &delay_cost_check);
call    0 returned 100%
        1: 3857:	    printf("timing_cost recomputed from scratch is %g. \n",
call    0 returned 100%
        -: 3858:		   timing_cost_check);
        2: 3859:	    if(fabs(timing_cost_check - timing_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1: 3860:	       timing_cost * ERROR_TOL)
        -: 3861:		{
    #####: 3862:		    printf("Error:  timing_cost_check: %g and timing_cost: "
call    0 never executed
        -: 3863:			   "%g differ in check_place.\n",
        -: 3864:			   timing_cost_check, timing_cost);
    #####: 3865:		    error++;
        -: 3866:		}
        1: 3867:	    printf("delay_cost recomputed from scratch is %g. \n",
call    0 returned 100%
        -: 3868:		   delay_cost_check);
        1: 3869:	    if(fabs(delay_cost_check - delay_cost) > delay_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3870:		{
    #####: 3871:		    printf("Error:  delay_cost_check: %g and delay_cost: "
call    0 never executed
        -: 3872:			   "%g differ in check_place.\n",
        -: 3873:			   delay_cost_check, delay_cost);
    #####: 3874:		    error++;
        -: 3875:		}
        -: 3876:	}
        -: 3877:
        1: 3878:    bdone = (int *)my_malloc(num_blocks * sizeof(int));
call    0 returned 100%
      139: 3879:    for(i = 0; i < num_blocks; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      138: 3880:	bdone[i] = 0;
        -: 3881:
        -: 3882:    /* Step through grid array. Check it against block array. */
       12: 3883:    for(i = 0; i <= (nx + 1); i++)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      144: 3884:	for(j = 0; j <= (ny + 1); j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3885:	    {
      144: 3886:		if(grid[i][j].usage > grid[i][j].type->capacity)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3887:		    {
        -: 3888:			printf
    #####: 3889:			    ("Error:  block at grid location (%d,%d) overused. "
call    0 never executed
        -: 3890:			     "Usage is %d\n", i, j, grid[i][j].usage);
    #####: 3891:			error++;
        -: 3892:		    }
        -: 3893:		usage_check = 0;
      217: 3894:		for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3895:		    {
      217: 3896:			bnum = grid[i][j].blocks[k];
      217: 3897:			if(EMPTY == bnum)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       79: 3898:			    continue;
        -: 3899:
      138: 3900:			if(block[bnum].type != grid[i][j].type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3901:			    {
        -: 3902:				printf
    #####: 3903:				    ("Error:  block %d type does not match grid location (%d,%d) type.\n",
call    0 never executed
        -: 3904:				     bnum, i, j);
    #####: 3905:				error++;
        -: 3906:			    }
      138: 3907:			if((block[bnum].x != i) || (block[bnum].y != j))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 3908:			    {
        -: 3909:				printf
    #####: 3910:				    ("Error:  block %d location conflicts with grid(%d,%d)"
call    0 never executed
        -: 3911:				     "data.\n", bnum, i, j);
    #####: 3912:				error++;
        -: 3913:			    }
      138: 3914:			++usage_check;
      138: 3915:			bdone[bnum]++;
        -: 3916:		    }
      144: 3917:		if(usage_check != grid[i][j].usage)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3918:		    {
        -: 3919:			printf
    #####: 3920:			    ("Error:  Location (%d,%d) usage is %d, but has actual usage %d.\n",
call    0 never executed
        -: 3921:			     i, j, grid[i][j].usage, usage_check);
        -: 3922:		    }
        -: 3923:	    }
        -: 3924:
        -: 3925:    /* Check that every block exists in the grid and block arrays somewhere. */
      138: 3926:    for(i = 0; i < num_blocks; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      138: 3927:	if(bdone[i] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3928:	    {
        -: 3929:		printf
    #####: 3930:		    ("Error:  block %d listed %d times in data structures.\n",
call    0 never executed
        -: 3931:		     i, bdone[i]);
    #####: 3932:		error++;
        -: 3933:	    }
        1: 3934:    free(bdone);
        -: 3935:
        1: 3936:    if(error == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3937:	{
        -: 3938:	    printf
        1: 3939:		("\nCompleted placement consistency check successfully.\n\n");
call    0 returned 100%
        -: 3940:#ifdef PRINT_REL_POS_DISTR
        -: 3941:	    print_relative_pos_distr();
        -: 3942:#endif
        -: 3943:	}
        -: 3944:    else
        -: 3945:	{
        -: 3946:	    printf
    #####: 3947:		("\nCompleted placement consistency check, %d Errors found.\n\n",
call    0 never executed
        -: 3948:		 error);
    #####: 3949:	    printf("Aborting program.\n");
call    0 never executed
    #####: 3950:	    exit(1);
call    0 never executed
        -: 3951:	}
      245: 3952:}
